// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.14.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables

import 'api/common.dart';
import 'api/contig.dart';
import 'api/reads.dart';
import 'api/sequence.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> initLogger({required String logDir, dynamic hint});

  Future<ContigServices> contigServicesNew({dynamic hint});

  Future<void> contigServicesSummarize(
      {required ContigServices that, dynamic hint});

  Future<RawReadServices> rawReadServicesNew({dynamic hint});

  Future<void> rawReadServicesSummarize(
      {required RawReadServices that, required String mode, dynamic hint});

  Future<void> alignmentServicesConcatAlignment(
      {required AlignmentServices that,
      required String outFname,
      required String outFmtStr,
      required String partitionFmt,
      dynamic hint});

  Future<AlignmentServices> alignmentServicesNew({dynamic hint});

  Future<void> alignmentServicesSummarizeAlignment(
      {required AlignmentServices that,
      required String outputPrefix,
      required int interval,
      dynamic hint});

  Future<void> filteringServicesFilterMinimalLength(
      {required FilteringServices that, required int length, dynamic hint});

  Future<void> filteringServicesFilterMinimalTaxa(
      {required FilteringServices that,
      required double percent,
      int? taxonCount,
      dynamic hint});

  Future<void> filteringServicesFilterParsimonyInfCount(
      {required FilteringServices that, required int count, dynamic hint});

  Future<void> filteringServicesFilterPercentInformative(
      {required FilteringServices that, required double percent, dynamic hint});

  Future<FilteringServices> filteringServicesNew({dynamic hint});

  Future<void> partitionServicesConvertPartition(
      {required PartitionServices that, dynamic hint});

  Future<PartitionServices> partitionServicesNew({dynamic hint});

  Future<void> sequenceServicesConvertSequence(
      {required SequenceServices that,
      required String outputFmt,
      required bool sort,
      dynamic hint});

  Future<SequenceServices> sequenceServicesNew({dynamic hint});

  Future<void> sequenceServicesParseSequenceId(
      {required SequenceServices that,
      required String outputFname,
      required bool isMap,
      dynamic hint});

  Future<void> sequenceServicesTranslateSequence(
      {required SequenceServices that,
      required String table,
      required int readingFrame,
      required String outputFmt,
      dynamic hint});

  Future<String> showDnaUppercase({dynamic hint});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> initLogger({required String logDir, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(logDir);
        return wire.wire_init_logger(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kInitLoggerConstMeta,
      argValues: [logDir],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kInitLoggerConstMeta => const TaskConstMeta(
        debugName: "init_logger",
        argNames: ["logDir"],
      );

  @override
  Future<ContigServices> contigServicesNew({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_ContigServices_new(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_contig_services,
        decodeErrorData: null,
      ),
      constMeta: kContigServicesNewConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kContigServicesNewConstMeta => const TaskConstMeta(
        debugName: "ContigServices_new",
        argNames: [],
      );

  @override
  Future<void> contigServicesSummarize(
      {required ContigServices that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_contig_services(that);
        return wire.wire_ContigServices_summarize(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kContigServicesSummarizeConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kContigServicesSummarizeConstMeta => const TaskConstMeta(
        debugName: "ContigServices_summarize",
        argNames: ["that"],
      );

  @override
  Future<RawReadServices> rawReadServicesNew({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_RawReadServices_new(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_raw_read_services,
        decodeErrorData: null,
      ),
      constMeta: kRawReadServicesNewConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRawReadServicesNewConstMeta => const TaskConstMeta(
        debugName: "RawReadServices_new",
        argNames: [],
      );

  @override
  Future<void> rawReadServicesSummarize(
      {required RawReadServices that, required String mode, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_raw_read_services(that);
        var arg1 = cst_encode_String(mode);
        return wire.wire_RawReadServices_summarize(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRawReadServicesSummarizeConstMeta,
      argValues: [that, mode],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRawReadServicesSummarizeConstMeta => const TaskConstMeta(
        debugName: "RawReadServices_summarize",
        argNames: ["that", "mode"],
      );

  @override
  Future<void> alignmentServicesConcatAlignment(
      {required AlignmentServices that,
      required String outFname,
      required String outFmtStr,
      required String partitionFmt,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_alignment_services(that);
        var arg1 = cst_encode_String(outFname);
        var arg2 = cst_encode_String(outFmtStr);
        var arg3 = cst_encode_String(partitionFmt);
        return wire.wire_AlignmentServices_concat_alignment(
            port_, arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kAlignmentServicesConcatAlignmentConstMeta,
      argValues: [that, outFname, outFmtStr, partitionFmt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAlignmentServicesConcatAlignmentConstMeta =>
      const TaskConstMeta(
        debugName: "AlignmentServices_concat_alignment",
        argNames: ["that", "outFname", "outFmtStr", "partitionFmt"],
      );

  @override
  Future<AlignmentServices> alignmentServicesNew({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_AlignmentServices_new(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_alignment_services,
        decodeErrorData: null,
      ),
      constMeta: kAlignmentServicesNewConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAlignmentServicesNewConstMeta => const TaskConstMeta(
        debugName: "AlignmentServices_new",
        argNames: [],
      );

  @override
  Future<void> alignmentServicesSummarizeAlignment(
      {required AlignmentServices that,
      required String outputPrefix,
      required int interval,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_alignment_services(that);
        var arg1 = cst_encode_String(outputPrefix);
        var arg2 = cst_encode_usize(interval);
        return wire.wire_AlignmentServices_summarize_alignment(
            port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kAlignmentServicesSummarizeAlignmentConstMeta,
      argValues: [that, outputPrefix, interval],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAlignmentServicesSummarizeAlignmentConstMeta =>
      const TaskConstMeta(
        debugName: "AlignmentServices_summarize_alignment",
        argNames: ["that", "outputPrefix", "interval"],
      );

  @override
  Future<void> filteringServicesFilterMinimalLength(
      {required FilteringServices that, required int length, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_filtering_services(that);
        var arg1 = cst_encode_usize(length);
        return wire.wire_FilteringServices_filter_minimal_length(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFilteringServicesFilterMinimalLengthConstMeta,
      argValues: [that, length],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFilteringServicesFilterMinimalLengthConstMeta =>
      const TaskConstMeta(
        debugName: "FilteringServices_filter_minimal_length",
        argNames: ["that", "length"],
      );

  @override
  Future<void> filteringServicesFilterMinimalTaxa(
      {required FilteringServices that,
      required double percent,
      int? taxonCount,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_filtering_services(that);
        var arg1 = cst_encode_f_64(percent);
        var arg2 = cst_encode_opt_box_autoadd_usize(taxonCount);
        return wire.wire_FilteringServices_filter_minimal_taxa(
            port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFilteringServicesFilterMinimalTaxaConstMeta,
      argValues: [that, percent, taxonCount],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFilteringServicesFilterMinimalTaxaConstMeta =>
      const TaskConstMeta(
        debugName: "FilteringServices_filter_minimal_taxa",
        argNames: ["that", "percent", "taxonCount"],
      );

  @override
  Future<void> filteringServicesFilterParsimonyInfCount(
      {required FilteringServices that, required int count, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_filtering_services(that);
        var arg1 = cst_encode_usize(count);
        return wire.wire_FilteringServices_filter_parsimony_inf_count(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFilteringServicesFilterParsimonyInfCountConstMeta,
      argValues: [that, count],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFilteringServicesFilterParsimonyInfCountConstMeta =>
      const TaskConstMeta(
        debugName: "FilteringServices_filter_parsimony_inf_count",
        argNames: ["that", "count"],
      );

  @override
  Future<void> filteringServicesFilterPercentInformative(
      {required FilteringServices that,
      required double percent,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_filtering_services(that);
        var arg1 = cst_encode_f_64(percent);
        return wire.wire_FilteringServices_filter_percent_informative(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFilteringServicesFilterPercentInformativeConstMeta,
      argValues: [that, percent],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFilteringServicesFilterPercentInformativeConstMeta =>
      const TaskConstMeta(
        debugName: "FilteringServices_filter_percent_informative",
        argNames: ["that", "percent"],
      );

  @override
  Future<FilteringServices> filteringServicesNew({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_FilteringServices_new(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_filtering_services,
        decodeErrorData: null,
      ),
      constMeta: kFilteringServicesNewConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFilteringServicesNewConstMeta => const TaskConstMeta(
        debugName: "FilteringServices_new",
        argNames: [],
      );

  @override
  Future<void> partitionServicesConvertPartition(
      {required PartitionServices that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_partition_services(that);
        return wire.wire_PartitionServices_convert_partition(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kPartitionServicesConvertPartitionConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPartitionServicesConvertPartitionConstMeta =>
      const TaskConstMeta(
        debugName: "PartitionServices_convert_partition",
        argNames: ["that"],
      );

  @override
  Future<PartitionServices> partitionServicesNew({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_PartitionServices_new(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_partition_services,
        decodeErrorData: null,
      ),
      constMeta: kPartitionServicesNewConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPartitionServicesNewConstMeta => const TaskConstMeta(
        debugName: "PartitionServices_new",
        argNames: [],
      );

  @override
  Future<void> sequenceServicesConvertSequence(
      {required SequenceServices that,
      required String outputFmt,
      required bool sort,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_sequence_services(that);
        var arg1 = cst_encode_String(outputFmt);
        var arg2 = cst_encode_bool(sort);
        return wire.wire_SequenceServices_convert_sequence(
            port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSequenceServicesConvertSequenceConstMeta,
      argValues: [that, outputFmt, sort],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSequenceServicesConvertSequenceConstMeta =>
      const TaskConstMeta(
        debugName: "SequenceServices_convert_sequence",
        argNames: ["that", "outputFmt", "sort"],
      );

  @override
  Future<SequenceServices> sequenceServicesNew({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_SequenceServices_new(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_sequence_services,
        decodeErrorData: null,
      ),
      constMeta: kSequenceServicesNewConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSequenceServicesNewConstMeta => const TaskConstMeta(
        debugName: "SequenceServices_new",
        argNames: [],
      );

  @override
  Future<void> sequenceServicesParseSequenceId(
      {required SequenceServices that,
      required String outputFname,
      required bool isMap,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_sequence_services(that);
        var arg1 = cst_encode_String(outputFname);
        var arg2 = cst_encode_bool(isMap);
        return wire.wire_SequenceServices_parse_sequence_id(
            port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSequenceServicesParseSequenceIdConstMeta,
      argValues: [that, outputFname, isMap],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSequenceServicesParseSequenceIdConstMeta =>
      const TaskConstMeta(
        debugName: "SequenceServices_parse_sequence_id",
        argNames: ["that", "outputFname", "isMap"],
      );

  @override
  Future<void> sequenceServicesTranslateSequence(
      {required SequenceServices that,
      required String table,
      required int readingFrame,
      required String outputFmt,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_sequence_services(that);
        var arg1 = cst_encode_String(table);
        var arg2 = cst_encode_usize(readingFrame);
        var arg3 = cst_encode_String(outputFmt);
        return wire.wire_SequenceServices_translate_sequence(
            port_, arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSequenceServicesTranslateSequenceConstMeta,
      argValues: [that, table, readingFrame, outputFmt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSequenceServicesTranslateSequenceConstMeta =>
      const TaskConstMeta(
        debugName: "SequenceServices_translate_sequence",
        argNames: ["that", "table", "readingFrame", "outputFmt"],
      );

  @override
  Future<String> showDnaUppercase({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_show_dna_uppercase(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kShowDnaUppercaseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kShowDnaUppercaseConstMeta => const TaskConstMeta(
        debugName: "show_dna_uppercase",
        argNames: [],
      );

  @protected
  String dco_decode_String(dynamic raw) {
    return raw as String;
  }

  @protected
  AlignmentServices dco_decode_alignment_services(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return AlignmentServices(
      dir: dco_decode_opt_String(arr[0]),
      files: dco_decode_list_String(arr[1]),
      inputFmt: dco_decode_String(arr[2]),
      datatype: dco_decode_String(arr[3]),
      outputDir: dco_decode_String(arr[4]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    return raw as bool;
  }

  @protected
  AlignmentServices dco_decode_box_autoadd_alignment_services(dynamic raw) {
    return dco_decode_alignment_services(raw);
  }

  @protected
  ContigServices dco_decode_box_autoadd_contig_services(dynamic raw) {
    return dco_decode_contig_services(raw);
  }

  @protected
  FilteringServices dco_decode_box_autoadd_filtering_services(dynamic raw) {
    return dco_decode_filtering_services(raw);
  }

  @protected
  PartitionServices dco_decode_box_autoadd_partition_services(dynamic raw) {
    return dco_decode_partition_services(raw);
  }

  @protected
  RawReadServices dco_decode_box_autoadd_raw_read_services(dynamic raw) {
    return dco_decode_raw_read_services(raw);
  }

  @protected
  SequenceServices dco_decode_box_autoadd_sequence_services(dynamic raw) {
    return dco_decode_sequence_services(raw);
  }

  @protected
  int dco_decode_box_autoadd_usize(dynamic raw) {
    return dco_decode_usize(raw);
  }

  @protected
  ContigServices dco_decode_contig_services(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ContigServices(
      dirPath: dco_decode_opt_String(arr[0]),
      files: dco_decode_list_String(arr[1]),
      fileFmt: dco_decode_String(arr[2]),
      outputDir: dco_decode_String(arr[3]),
    );
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    return raw as double;
  }

  @protected
  FilteringServices dco_decode_filtering_services(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return FilteringServices(
      dir: dco_decode_opt_String(arr[0]),
      files: dco_decode_list_String(arr[1]),
      inputFmt: dco_decode_String(arr[2]),
      datatype: dco_decode_String(arr[3]),
      outputDir: dco_decode_String(arr[4]),
      isConcat: dco_decode_bool(arr[5]),
    );
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    return raw as Uint8List;
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_usize(dynamic raw) {
    return raw == null ? null : dco_decode_box_autoadd_usize(raw);
  }

  @protected
  PartitionServices dco_decode_partition_services(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return PartitionServices(
      fileInputs: dco_decode_list_String(arr[0]),
      inputPartFmt: dco_decode_String(arr[1]),
      output: dco_decode_String(arr[2]),
      outputPartFmt: dco_decode_String(arr[3]),
      datatype: dco_decode_String(arr[4]),
      isUncheck: dco_decode_bool(arr[5]),
    );
  }

  @protected
  RawReadServices dco_decode_raw_read_services(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return RawReadServices(
      dirPath: dco_decode_opt_String(arr[0]),
      files: dco_decode_list_String(arr[1]),
      fileFmt: dco_decode_String(arr[2]),
      outputDir: dco_decode_String(arr[3]),
    );
  }

  @protected
  SequenceServices dco_decode_sequence_services(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return SequenceServices(
      dir: dco_decode_opt_String(arr[0]),
      files: dco_decode_list_String(arr[1]),
      inputFmt: dco_decode_String(arr[2]),
      datatype: dco_decode_String(arr[3]),
      outputDir: dco_decode_String(arr[4]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    return;
  }

  @protected
  int dco_decode_usize(dynamic raw) {
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  AlignmentServices sse_decode_alignment_services(
      SseDeserializer deserializer) {
    var var_dir = sse_decode_opt_String(deserializer);
    var var_files = sse_decode_list_String(deserializer);
    var var_inputFmt = sse_decode_String(deserializer);
    var var_datatype = sse_decode_String(deserializer);
    var var_outputDir = sse_decode_String(deserializer);
    return AlignmentServices(
        dir: var_dir,
        files: var_files,
        inputFmt: var_inputFmt,
        datatype: var_datatype,
        outputDir: var_outputDir);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  AlignmentServices sse_decode_box_autoadd_alignment_services(
      SseDeserializer deserializer) {
    return (sse_decode_alignment_services(deserializer));
  }

  @protected
  ContigServices sse_decode_box_autoadd_contig_services(
      SseDeserializer deserializer) {
    return (sse_decode_contig_services(deserializer));
  }

  @protected
  FilteringServices sse_decode_box_autoadd_filtering_services(
      SseDeserializer deserializer) {
    return (sse_decode_filtering_services(deserializer));
  }

  @protected
  PartitionServices sse_decode_box_autoadd_partition_services(
      SseDeserializer deserializer) {
    return (sse_decode_partition_services(deserializer));
  }

  @protected
  RawReadServices sse_decode_box_autoadd_raw_read_services(
      SseDeserializer deserializer) {
    return (sse_decode_raw_read_services(deserializer));
  }

  @protected
  SequenceServices sse_decode_box_autoadd_sequence_services(
      SseDeserializer deserializer) {
    return (sse_decode_sequence_services(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_usize(SseDeserializer deserializer) {
    return (sse_decode_usize(deserializer));
  }

  @protected
  ContigServices sse_decode_contig_services(SseDeserializer deserializer) {
    var var_dirPath = sse_decode_opt_String(deserializer);
    var var_files = sse_decode_list_String(deserializer);
    var var_fileFmt = sse_decode_String(deserializer);
    var var_outputDir = sse_decode_String(deserializer);
    return ContigServices(
        dirPath: var_dirPath,
        files: var_files,
        fileFmt: var_fileFmt,
        outputDir: var_outputDir);
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    return deserializer.buffer.getFloat64();
  }

  @protected
  FilteringServices sse_decode_filtering_services(
      SseDeserializer deserializer) {
    var var_dir = sse_decode_opt_String(deserializer);
    var var_files = sse_decode_list_String(deserializer);
    var var_inputFmt = sse_decode_String(deserializer);
    var var_datatype = sse_decode_String(deserializer);
    var var_outputDir = sse_decode_String(deserializer);
    var var_isConcat = sse_decode_bool(deserializer);
    return FilteringServices(
        dir: var_dir,
        files: var_files,
        inputFmt: var_inputFmt,
        datatype: var_datatype,
        outputDir: var_outputDir,
        isConcat: var_isConcat);
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_usize(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_usize(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PartitionServices sse_decode_partition_services(
      SseDeserializer deserializer) {
    var var_fileInputs = sse_decode_list_String(deserializer);
    var var_inputPartFmt = sse_decode_String(deserializer);
    var var_output = sse_decode_String(deserializer);
    var var_outputPartFmt = sse_decode_String(deserializer);
    var var_datatype = sse_decode_String(deserializer);
    var var_isUncheck = sse_decode_bool(deserializer);
    return PartitionServices(
        fileInputs: var_fileInputs,
        inputPartFmt: var_inputPartFmt,
        output: var_output,
        outputPartFmt: var_outputPartFmt,
        datatype: var_datatype,
        isUncheck: var_isUncheck);
  }

  @protected
  RawReadServices sse_decode_raw_read_services(SseDeserializer deserializer) {
    var var_dirPath = sse_decode_opt_String(deserializer);
    var var_files = sse_decode_list_String(deserializer);
    var var_fileFmt = sse_decode_String(deserializer);
    var var_outputDir = sse_decode_String(deserializer);
    return RawReadServices(
        dirPath: var_dirPath,
        files: var_files,
        fileFmt: var_fileFmt,
        outputDir: var_outputDir);
  }

  @protected
  SequenceServices sse_decode_sequence_services(SseDeserializer deserializer) {
    var var_dir = sse_decode_opt_String(deserializer);
    var var_files = sse_decode_list_String(deserializer);
    var var_inputFmt = sse_decode_String(deserializer);
    var var_datatype = sse_decode_String(deserializer);
    var var_outputDir = sse_decode_String(deserializer);
    return SequenceServices(
        dir: var_dir,
        files: var_files,
        inputFmt: var_inputFmt,
        datatype: var_datatype,
        outputDir: var_outputDir);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {}

  @protected
  int sse_decode_usize(SseDeserializer deserializer) {
    return deserializer.buffer.getUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    return deserializer.buffer.getInt32();
  }

  @protected
  bool cst_encode_bool(bool raw) {
    return raw;
  }

  @protected
  double cst_encode_f_64(double raw) {
    return raw;
  }

  @protected
  int cst_encode_u_8(int raw) {
    return raw;
  }

  @protected
  void cst_encode_unit(void raw) {
    return raw;
  }

  @protected
  int cst_encode_usize(int raw) {
    return raw;
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_alignment_services(
      AlignmentServices self, SseSerializer serializer) {
    sse_encode_opt_String(self.dir, serializer);
    sse_encode_list_String(self.files, serializer);
    sse_encode_String(self.inputFmt, serializer);
    sse_encode_String(self.datatype, serializer);
    sse_encode_String(self.outputDir, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_alignment_services(
      AlignmentServices self, SseSerializer serializer) {
    sse_encode_alignment_services(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_contig_services(
      ContigServices self, SseSerializer serializer) {
    sse_encode_contig_services(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_filtering_services(
      FilteringServices self, SseSerializer serializer) {
    sse_encode_filtering_services(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_partition_services(
      PartitionServices self, SseSerializer serializer) {
    sse_encode_partition_services(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_raw_read_services(
      RawReadServices self, SseSerializer serializer) {
    sse_encode_raw_read_services(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_sequence_services(
      SequenceServices self, SseSerializer serializer) {
    sse_encode_sequence_services(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_usize(int self, SseSerializer serializer) {
    sse_encode_usize(self, serializer);
  }

  @protected
  void sse_encode_contig_services(
      ContigServices self, SseSerializer serializer) {
    sse_encode_opt_String(self.dirPath, serializer);
    sse_encode_list_String(self.files, serializer);
    sse_encode_String(self.fileFmt, serializer);
    sse_encode_String(self.outputDir, serializer);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_filtering_services(
      FilteringServices self, SseSerializer serializer) {
    sse_encode_opt_String(self.dir, serializer);
    sse_encode_list_String(self.files, serializer);
    sse_encode_String(self.inputFmt, serializer);
    sse_encode_String(self.datatype, serializer);
    sse_encode_String(self.outputDir, serializer);
    sse_encode_bool(self.isConcat, serializer);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_usize(int? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_usize(self, serializer);
    }
  }

  @protected
  void sse_encode_partition_services(
      PartitionServices self, SseSerializer serializer) {
    sse_encode_list_String(self.fileInputs, serializer);
    sse_encode_String(self.inputPartFmt, serializer);
    sse_encode_String(self.output, serializer);
    sse_encode_String(self.outputPartFmt, serializer);
    sse_encode_String(self.datatype, serializer);
    sse_encode_bool(self.isUncheck, serializer);
  }

  @protected
  void sse_encode_raw_read_services(
      RawReadServices self, SseSerializer serializer) {
    sse_encode_opt_String(self.dirPath, serializer);
    sse_encode_list_String(self.files, serializer);
    sse_encode_String(self.fileFmt, serializer);
    sse_encode_String(self.outputDir, serializer);
  }

  @protected
  void sse_encode_sequence_services(
      SequenceServices self, SseSerializer serializer) {
    sse_encode_opt_String(self.dir, serializer);
    sse_encode_list_String(self.files, serializer);
    sse_encode_String(self.inputFmt, serializer);
    sse_encode_String(self.datatype, serializer);
    sse_encode_String(self.outputDir, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {}

  @protected
  void sse_encode_usize(int self, SseSerializer serializer) {
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    serializer.buffer.putInt32(self);
  }
}
