// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.3.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables

import 'api/common.dart';
import 'api/contig.dart';
import 'api/fastq.dart';
import 'api/sequence.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  void initLogger({required String path, dynamic hint});

  Future<ContigServices> contigServicesNew({dynamic hint});

  Future<void> contigServicesSummarize(
      {required ContigServices that, dynamic hint});

  Future<FastqServices> fastqServicesNew({dynamic hint});

  Future<void> fastqServicesSummarize(
      {required FastqServices that, required String mode, dynamic hint});

  Future<void> sequenceServicesConcatAlignment(
      {required SequenceServices that,
      required String outFname,
      required String outFmtStr,
      required String partitionFmt,
      dynamic hint});

  Future<void> sequenceServicesConvertSequence(
      {required SequenceServices that,
      required String outputFmt,
      required bool sort,
      dynamic hint});

  Future<SequenceServices> sequenceServicesNew({dynamic hint});

  Future<void> sequenceServicesParseSequenceId(
      {required SequenceServices that, required bool isMap, dynamic hint});

  Future<void> sequenceServicesSummarizeAlignment(
      {required SequenceServices that,
      required String outputPrefix,
      required int interval,
      dynamic hint});

  Future<void> sequenceServicesTranslateSequence(
      {required SequenceServices that,
      required String table,
      required int readingFrame,
      required String outputFmt,
      dynamic hint});

  String showDnaUppercase({dynamic hint});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  void initLogger({required String path, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(path);
        return wire.wire_init_logger(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kInitLoggerConstMeta,
      argValues: [path],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kInitLoggerConstMeta => const TaskConstMeta(
        debugName: "init_logger",
        argNames: ["path"],
      );

  @override
  Future<ContigServices> contigServicesNew({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_ContigServices_new(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_contig_services,
        decodeErrorData: null,
      ),
      constMeta: kContigServicesNewConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kContigServicesNewConstMeta => const TaskConstMeta(
        debugName: "ContigServices_new",
        argNames: [],
      );

  @override
  Future<void> contigServicesSummarize(
      {required ContigServices that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_contig_services(that);
        return wire.wire_ContigServices_summarize(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kContigServicesSummarizeConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kContigServicesSummarizeConstMeta => const TaskConstMeta(
        debugName: "ContigServices_summarize",
        argNames: ["that"],
      );

  @override
  Future<FastqServices> fastqServicesNew({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_FastqServices_new(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_fastq_services,
        decodeErrorData: null,
      ),
      constMeta: kFastqServicesNewConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFastqServicesNewConstMeta => const TaskConstMeta(
        debugName: "FastqServices_new",
        argNames: [],
      );

  @override
  Future<void> fastqServicesSummarize(
      {required FastqServices that, required String mode, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_fastq_services(that);
        var arg1 = cst_encode_String(mode);
        return wire.wire_FastqServices_summarize(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFastqServicesSummarizeConstMeta,
      argValues: [that, mode],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFastqServicesSummarizeConstMeta => const TaskConstMeta(
        debugName: "FastqServices_summarize",
        argNames: ["that", "mode"],
      );

  @override
  Future<void> sequenceServicesConcatAlignment(
      {required SequenceServices that,
      required String outFname,
      required String outFmtStr,
      required String partitionFmt,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_sequence_services(that);
        var arg1 = cst_encode_String(outFname);
        var arg2 = cst_encode_String(outFmtStr);
        var arg3 = cst_encode_String(partitionFmt);
        return wire.wire_SequenceServices_concat_alignment(
            port_, arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSequenceServicesConcatAlignmentConstMeta,
      argValues: [that, outFname, outFmtStr, partitionFmt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSequenceServicesConcatAlignmentConstMeta =>
      const TaskConstMeta(
        debugName: "SequenceServices_concat_alignment",
        argNames: ["that", "outFname", "outFmtStr", "partitionFmt"],
      );

  @override
  Future<void> sequenceServicesConvertSequence(
      {required SequenceServices that,
      required String outputFmt,
      required bool sort,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_sequence_services(that);
        var arg1 = cst_encode_String(outputFmt);
        var arg2 = cst_encode_bool(sort);
        return wire.wire_SequenceServices_convert_sequence(
            port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSequenceServicesConvertSequenceConstMeta,
      argValues: [that, outputFmt, sort],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSequenceServicesConvertSequenceConstMeta =>
      const TaskConstMeta(
        debugName: "SequenceServices_convert_sequence",
        argNames: ["that", "outputFmt", "sort"],
      );

  @override
  Future<SequenceServices> sequenceServicesNew({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_SequenceServices_new(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_sequence_services,
        decodeErrorData: null,
      ),
      constMeta: kSequenceServicesNewConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSequenceServicesNewConstMeta => const TaskConstMeta(
        debugName: "SequenceServices_new",
        argNames: [],
      );

  @override
  Future<void> sequenceServicesParseSequenceId(
      {required SequenceServices that, required bool isMap, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_sequence_services(that);
        var arg1 = cst_encode_bool(isMap);
        return wire.wire_SequenceServices_parse_sequence_id(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSequenceServicesParseSequenceIdConstMeta,
      argValues: [that, isMap],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSequenceServicesParseSequenceIdConstMeta =>
      const TaskConstMeta(
        debugName: "SequenceServices_parse_sequence_id",
        argNames: ["that", "isMap"],
      );

  @override
  Future<void> sequenceServicesSummarizeAlignment(
      {required SequenceServices that,
      required String outputPrefix,
      required int interval,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_sequence_services(that);
        var arg1 = cst_encode_String(outputPrefix);
        var arg2 = cst_encode_usize(interval);
        return wire.wire_SequenceServices_summarize_alignment(
            port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSequenceServicesSummarizeAlignmentConstMeta,
      argValues: [that, outputPrefix, interval],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSequenceServicesSummarizeAlignmentConstMeta =>
      const TaskConstMeta(
        debugName: "SequenceServices_summarize_alignment",
        argNames: ["that", "outputPrefix", "interval"],
      );

  @override
  Future<void> sequenceServicesTranslateSequence(
      {required SequenceServices that,
      required String table,
      required int readingFrame,
      required String outputFmt,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_sequence_services(that);
        var arg1 = cst_encode_String(table);
        var arg2 = cst_encode_usize(readingFrame);
        var arg3 = cst_encode_String(outputFmt);
        return wire.wire_SequenceServices_translate_sequence(
            port_, arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSequenceServicesTranslateSequenceConstMeta,
      argValues: [that, table, readingFrame, outputFmt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSequenceServicesTranslateSequenceConstMeta =>
      const TaskConstMeta(
        debugName: "SequenceServices_translate_sequence",
        argNames: ["that", "table", "readingFrame", "outputFmt"],
      );

  @override
  String showDnaUppercase({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_show_dna_uppercase();
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kShowDnaUppercaseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kShowDnaUppercaseConstMeta => const TaskConstMeta(
        debugName: "show_dna_uppercase",
        argNames: [],
      );

  @protected
  String dco_decode_String(dynamic raw) {
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    return raw as bool;
  }

  @protected
  ContigServices dco_decode_box_autoadd_contig_services(dynamic raw) {
    return dco_decode_contig_services(raw);
  }

  @protected
  FastqServices dco_decode_box_autoadd_fastq_services(dynamic raw) {
    return dco_decode_fastq_services(raw);
  }

  @protected
  SequenceServices dco_decode_box_autoadd_sequence_services(dynamic raw) {
    return dco_decode_sequence_services(raw);
  }

  @protected
  ContigServices dco_decode_contig_services(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ContigServices(
      dirPath: dco_decode_opt_String(arr[0]),
      files: dco_decode_list_String(arr[1]),
      fileFmt: dco_decode_String(arr[2]),
      outputDir: dco_decode_String(arr[3]),
    );
  }

  @protected
  FastqServices dco_decode_fastq_services(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return FastqServices(
      dirPath: dco_decode_opt_String(arr[0]),
      files: dco_decode_list_String(arr[1]),
      fileFmt: dco_decode_String(arr[2]),
      outputDir: dco_decode_String(arr[3]),
    );
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8(dynamic raw) {
    return raw as Uint8List;
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  SequenceServices dco_decode_sequence_services(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return SequenceServices(
      dirPath: dco_decode_opt_String(arr[0]),
      files: dco_decode_list_String(arr[1]),
      fileFmt: dco_decode_String(arr[2]),
      datatype: dco_decode_String(arr[3]),
      outputDir: dco_decode_String(arr[4]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    return;
  }

  @protected
  int dco_decode_usize(dynamic raw) {
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    var inner = sse_decode_list_prim_u_8(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  ContigServices sse_decode_box_autoadd_contig_services(
      SseDeserializer deserializer) {
    return (sse_decode_contig_services(deserializer));
  }

  @protected
  FastqServices sse_decode_box_autoadd_fastq_services(
      SseDeserializer deserializer) {
    return (sse_decode_fastq_services(deserializer));
  }

  @protected
  SequenceServices sse_decode_box_autoadd_sequence_services(
      SseDeserializer deserializer) {
    return (sse_decode_sequence_services(deserializer));
  }

  @protected
  ContigServices sse_decode_contig_services(SseDeserializer deserializer) {
    var var_dirPath = sse_decode_opt_String(deserializer);
    var var_files = sse_decode_list_String(deserializer);
    var var_fileFmt = sse_decode_String(deserializer);
    var var_outputDir = sse_decode_String(deserializer);
    return ContigServices(
        dirPath: var_dirPath,
        files: var_files,
        fileFmt: var_fileFmt,
        outputDir: var_outputDir);
  }

  @protected
  FastqServices sse_decode_fastq_services(SseDeserializer deserializer) {
    var var_dirPath = sse_decode_opt_String(deserializer);
    var var_files = sse_decode_list_String(deserializer);
    var var_fileFmt = sse_decode_String(deserializer);
    var var_outputDir = sse_decode_String(deserializer);
    return FastqServices(
        dirPath: var_dirPath,
        files: var_files,
        fileFmt: var_fileFmt,
        outputDir: var_outputDir);
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  SequenceServices sse_decode_sequence_services(SseDeserializer deserializer) {
    var var_dirPath = sse_decode_opt_String(deserializer);
    var var_files = sse_decode_list_String(deserializer);
    var var_fileFmt = sse_decode_String(deserializer);
    var var_datatype = sse_decode_String(deserializer);
    var var_outputDir = sse_decode_String(deserializer);
    return SequenceServices(
        dirPath: var_dirPath,
        files: var_files,
        fileFmt: var_fileFmt,
        datatype: var_datatype,
        outputDir: var_outputDir);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {}

  @protected
  int sse_decode_usize(SseDeserializer deserializer) {
    return deserializer.buffer.getUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    return deserializer.buffer.getInt32();
  }

  @protected
  bool cst_encode_bool(bool raw) {
    return raw;
  }

  @protected
  int cst_encode_u_8(int raw) {
    return raw;
  }

  @protected
  void cst_encode_unit(void raw) {
    return raw;
  }

  @protected
  int cst_encode_usize(int raw) {
    return raw;
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    sse_encode_list_prim_u_8(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_contig_services(
      ContigServices self, SseSerializer serializer) {
    sse_encode_contig_services(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_fastq_services(
      FastqServices self, SseSerializer serializer) {
    sse_encode_fastq_services(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_sequence_services(
      SequenceServices self, SseSerializer serializer) {
    sse_encode_sequence_services(self, serializer);
  }

  @protected
  void sse_encode_contig_services(
      ContigServices self, SseSerializer serializer) {
    sse_encode_opt_String(self.dirPath, serializer);
    sse_encode_list_String(self.files, serializer);
    sse_encode_String(self.fileFmt, serializer);
    sse_encode_String(self.outputDir, serializer);
  }

  @protected
  void sse_encode_fastq_services(FastqServices self, SseSerializer serializer) {
    sse_encode_opt_String(self.dirPath, serializer);
    sse_encode_list_String(self.files, serializer);
    sse_encode_String(self.fileFmt, serializer);
    sse_encode_String(self.outputDir, serializer);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8(Uint8List self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_sequence_services(
      SequenceServices self, SseSerializer serializer) {
    sse_encode_opt_String(self.dirPath, serializer);
    sse_encode_list_String(self.files, serializer);
    sse_encode_String(self.fileFmt, serializer);
    sse_encode_String(self.datatype, serializer);
    sse_encode_String(self.outputDir, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {}

  @protected
  void sse_encode_usize(int self, SseSerializer serializer) {
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    serializer.buffer.putInt32(self);
  }
}
