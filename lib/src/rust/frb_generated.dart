// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.21.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/archive.dart';
import 'api/common.dart';
import 'api/contig.dart';
import 'api/reads.dart';
import 'api/sequence.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0-dev.21';

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<ArchiveServices> archiveServicesNew({dynamic hint});

  Future<void> archiveServicesZip(
      {required ArchiveServices that, dynamic hint});

  Future<void> initLogger({required String logDir, dynamic hint});

  Future<ContigServices> contigServicesNew({dynamic hint});

  Future<void> contigServicesSummarize(
      {required ContigServices that, dynamic hint});

  Future<RawReadServices> rawReadServicesNew({dynamic hint});

  Future<void> rawReadServicesSummarize(
      {required RawReadServices that, required String mode, dynamic hint});

  Future<void> alignmentServicesConcatAlignment(
      {required AlignmentServices that,
      required String outFname,
      required String outFmtStr,
      required String partitionFmt,
      dynamic hint});

  Future<AlignmentServices> alignmentServicesNew({dynamic hint});

  Future<void> alignmentServicesSummarizeAlignment(
      {required AlignmentServices that,
      required String outputPrefix,
      required int interval,
      dynamic hint});

  Future<void> filteringServicesFilter(
      {required FilteringServices that, dynamic hint});

  Future<FilteringServices> filteringServicesNew({dynamic hint});

  Future<void> partitionServicesConvertPartition(
      {required PartitionServices that, dynamic hint});

  Future<PartitionServices> partitionServicesNew({dynamic hint});

  Future<void> sequenceExtractionExtract(
      {required SequenceExtraction that, dynamic hint});

  Future<SequenceExtraction> sequenceExtractionNew({dynamic hint});

  Future<SequenceRemoval> sequenceRemovalNew({dynamic hint});

  Future<void> sequenceRemovalRemoveSequence(
      {required SequenceRemoval that, dynamic hint});

  Future<SequenceRenaming> sequenceRenamingNew({dynamic hint});

  Future<void> sequenceRenamingRenameSequence(
      {required SequenceRenaming that, dynamic hint});

  Future<void> sequenceServicesConvertSequence(
      {required SequenceServices that,
      required String outputFmt,
      required bool sort,
      dynamic hint});

  Future<SequenceServices> sequenceServicesNew({dynamic hint});

  Future<void> sequenceServicesParseSequenceId(
      {required SequenceServices that,
      required String outputFname,
      required bool isMap,
      dynamic hint});

  Future<void> sequenceServicesTranslateSequence(
      {required SequenceServices that,
      required String table,
      required int readingFrame,
      required String outputFmt,
      dynamic hint});

  Future<SplitAlignmentServices> splitAlignmentServicesNew({dynamic hint});

  Future<void> splitAlignmentServicesSplitAlignment(
      {required SplitAlignmentServices that, dynamic hint});

  Future<String> showDnaUppercase({dynamic hint});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<ArchiveServices> archiveServicesNew({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_archive_services,
        decodeErrorData: null,
      ),
      constMeta: kArchiveServicesNewConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kArchiveServicesNewConstMeta => const TaskConstMeta(
        debugName: "ArchiveServices_new",
        argNames: [],
      );

  @override
  Future<void> archiveServicesZip(
      {required ArchiveServices that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_archive_services(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kArchiveServicesZipConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kArchiveServicesZipConstMeta => const TaskConstMeta(
        debugName: "ArchiveServices_zip",
        argNames: ["that"],
      );

  @override
  Future<void> initLogger({required String logDir, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(logDir, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kInitLoggerConstMeta,
      argValues: [logDir],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kInitLoggerConstMeta => const TaskConstMeta(
        debugName: "init_logger",
        argNames: ["logDir"],
      );

  @override
  Future<ContigServices> contigServicesNew({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_contig_services,
        decodeErrorData: null,
      ),
      constMeta: kContigServicesNewConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kContigServicesNewConstMeta => const TaskConstMeta(
        debugName: "ContigServices_new",
        argNames: [],
      );

  @override
  Future<void> contigServicesSummarize(
      {required ContigServices that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_contig_services(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kContigServicesSummarizeConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kContigServicesSummarizeConstMeta => const TaskConstMeta(
        debugName: "ContigServices_summarize",
        argNames: ["that"],
      );

  @override
  Future<RawReadServices> rawReadServicesNew({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_raw_read_services,
        decodeErrorData: null,
      ),
      constMeta: kRawReadServicesNewConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRawReadServicesNewConstMeta => const TaskConstMeta(
        debugName: "RawReadServices_new",
        argNames: [],
      );

  @override
  Future<void> rawReadServicesSummarize(
      {required RawReadServices that, required String mode, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_raw_read_services(that, serializer);
        sse_encode_String(mode, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRawReadServicesSummarizeConstMeta,
      argValues: [that, mode],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRawReadServicesSummarizeConstMeta => const TaskConstMeta(
        debugName: "RawReadServices_summarize",
        argNames: ["that", "mode"],
      );

  @override
  Future<void> alignmentServicesConcatAlignment(
      {required AlignmentServices that,
      required String outFname,
      required String outFmtStr,
      required String partitionFmt,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_alignment_services(that, serializer);
        sse_encode_String(outFname, serializer);
        sse_encode_String(outFmtStr, serializer);
        sse_encode_String(partitionFmt, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kAlignmentServicesConcatAlignmentConstMeta,
      argValues: [that, outFname, outFmtStr, partitionFmt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAlignmentServicesConcatAlignmentConstMeta =>
      const TaskConstMeta(
        debugName: "AlignmentServices_concat_alignment",
        argNames: ["that", "outFname", "outFmtStr", "partitionFmt"],
      );

  @override
  Future<AlignmentServices> alignmentServicesNew({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_alignment_services,
        decodeErrorData: null,
      ),
      constMeta: kAlignmentServicesNewConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAlignmentServicesNewConstMeta => const TaskConstMeta(
        debugName: "AlignmentServices_new",
        argNames: [],
      );

  @override
  Future<void> alignmentServicesSummarizeAlignment(
      {required AlignmentServices that,
      required String outputPrefix,
      required int interval,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_alignment_services(that, serializer);
        sse_encode_String(outputPrefix, serializer);
        sse_encode_usize(interval, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kAlignmentServicesSummarizeAlignmentConstMeta,
      argValues: [that, outputPrefix, interval],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAlignmentServicesSummarizeAlignmentConstMeta =>
      const TaskConstMeta(
        debugName: "AlignmentServices_summarize_alignment",
        argNames: ["that", "outputPrefix", "interval"],
      );

  @override
  Future<void> filteringServicesFilter(
      {required FilteringServices that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_filtering_services(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFilteringServicesFilterConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFilteringServicesFilterConstMeta => const TaskConstMeta(
        debugName: "FilteringServices_filter",
        argNames: ["that"],
      );

  @override
  Future<FilteringServices> filteringServicesNew({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_filtering_services,
        decodeErrorData: null,
      ),
      constMeta: kFilteringServicesNewConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFilteringServicesNewConstMeta => const TaskConstMeta(
        debugName: "FilteringServices_new",
        argNames: [],
      );

  @override
  Future<void> partitionServicesConvertPartition(
      {required PartitionServices that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_partition_services(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kPartitionServicesConvertPartitionConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPartitionServicesConvertPartitionConstMeta =>
      const TaskConstMeta(
        debugName: "PartitionServices_convert_partition",
        argNames: ["that"],
      );

  @override
  Future<PartitionServices> partitionServicesNew({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_partition_services,
        decodeErrorData: null,
      ),
      constMeta: kPartitionServicesNewConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPartitionServicesNewConstMeta => const TaskConstMeta(
        debugName: "PartitionServices_new",
        argNames: [],
      );

  @override
  Future<void> sequenceExtractionExtract(
      {required SequenceExtraction that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_sequence_extraction(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 27, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSequenceExtractionExtractConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSequenceExtractionExtractConstMeta => const TaskConstMeta(
        debugName: "SequenceExtraction_extract",
        argNames: ["that"],
      );

  @override
  Future<SequenceExtraction> sequenceExtractionNew({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 26, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_sequence_extraction,
        decodeErrorData: null,
      ),
      constMeta: kSequenceExtractionNewConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSequenceExtractionNewConstMeta => const TaskConstMeta(
        debugName: "SequenceExtraction_new",
        argNames: [],
      );

  @override
  Future<SequenceRemoval> sequenceRemovalNew({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_sequence_removal,
        decodeErrorData: null,
      ),
      constMeta: kSequenceRemovalNewConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSequenceRemovalNewConstMeta => const TaskConstMeta(
        debugName: "SequenceRemoval_new",
        argNames: [],
      );

  @override
  Future<void> sequenceRemovalRemoveSequence(
      {required SequenceRemoval that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_sequence_removal(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSequenceRemovalRemoveSequenceConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSequenceRemovalRemoveSequenceConstMeta =>
      const TaskConstMeta(
        debugName: "SequenceRemoval_remove_sequence",
        argNames: ["that"],
      );

  @override
  Future<SequenceRenaming> sequenceRenamingNew({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 24, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_sequence_renaming,
        decodeErrorData: null,
      ),
      constMeta: kSequenceRenamingNewConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSequenceRenamingNewConstMeta => const TaskConstMeta(
        debugName: "SequenceRenaming_new",
        argNames: [],
      );

  @override
  Future<void> sequenceRenamingRenameSequence(
      {required SequenceRenaming that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_sequence_renaming(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 25, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSequenceRenamingRenameSequenceConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSequenceRenamingRenameSequenceConstMeta =>
      const TaskConstMeta(
        debugName: "SequenceRenaming_rename_sequence",
        argNames: ["that"],
      );

  @override
  Future<void> sequenceServicesConvertSequence(
      {required SequenceServices that,
      required String outputFmt,
      required bool sort,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_sequence_services(that, serializer);
        sse_encode_String(outputFmt, serializer);
        sse_encode_bool(sort, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSequenceServicesConvertSequenceConstMeta,
      argValues: [that, outputFmt, sort],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSequenceServicesConvertSequenceConstMeta =>
      const TaskConstMeta(
        debugName: "SequenceServices_convert_sequence",
        argNames: ["that", "outputFmt", "sort"],
      );

  @override
  Future<SequenceServices> sequenceServicesNew({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_sequence_services,
        decodeErrorData: null,
      ),
      constMeta: kSequenceServicesNewConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSequenceServicesNewConstMeta => const TaskConstMeta(
        debugName: "SequenceServices_new",
        argNames: [],
      );

  @override
  Future<void> sequenceServicesParseSequenceId(
      {required SequenceServices that,
      required String outputFname,
      required bool isMap,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_sequence_services(that, serializer);
        sse_encode_String(outputFname, serializer);
        sse_encode_bool(isMap, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSequenceServicesParseSequenceIdConstMeta,
      argValues: [that, outputFname, isMap],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSequenceServicesParseSequenceIdConstMeta =>
      const TaskConstMeta(
        debugName: "SequenceServices_parse_sequence_id",
        argNames: ["that", "outputFname", "isMap"],
      );

  @override
  Future<void> sequenceServicesTranslateSequence(
      {required SequenceServices that,
      required String table,
      required int readingFrame,
      required String outputFmt,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_sequence_services(that, serializer);
        sse_encode_String(table, serializer);
        sse_encode_usize(readingFrame, serializer);
        sse_encode_String(outputFmt, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSequenceServicesTranslateSequenceConstMeta,
      argValues: [that, table, readingFrame, outputFmt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSequenceServicesTranslateSequenceConstMeta =>
      const TaskConstMeta(
        debugName: "SequenceServices_translate_sequence",
        argNames: ["that", "table", "readingFrame", "outputFmt"],
      );

  @override
  Future<SplitAlignmentServices> splitAlignmentServicesNew({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_split_alignment_services,
        decodeErrorData: null,
      ),
      constMeta: kSplitAlignmentServicesNewConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSplitAlignmentServicesNewConstMeta => const TaskConstMeta(
        debugName: "SplitAlignmentServices_new",
        argNames: [],
      );

  @override
  Future<void> splitAlignmentServicesSplitAlignment(
      {required SplitAlignmentServices that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_split_alignment_services(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSplitAlignmentServicesSplitAlignmentConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSplitAlignmentServicesSplitAlignmentConstMeta =>
      const TaskConstMeta(
        debugName: "SplitAlignmentServices_split_alignment",
        argNames: ["that"],
      );

  @override
  Future<String> showDnaUppercase({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kShowDnaUppercaseConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kShowDnaUppercaseConstMeta => const TaskConstMeta(
        debugName: "show_dna_uppercase",
        argNames: [],
      );

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  AlignmentServices dco_decode_alignment_services(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return AlignmentServices(
      inputFiles: dco_decode_list_String(arr[0]),
      inputFmt: dco_decode_String(arr[1]),
      datatype: dco_decode_String(arr[2]),
      outputDir: dco_decode_String(arr[3]),
    );
  }

  @protected
  ArchiveServices dco_decode_archive_services(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ArchiveServices(
      outputPath: dco_decode_String(arr[0]),
      inputFiles: dco_decode_list_String(arr[1]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  AlignmentServices dco_decode_box_autoadd_alignment_services(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_alignment_services(raw);
  }

  @protected
  ArchiveServices dco_decode_box_autoadd_archive_services(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_archive_services(raw);
  }

  @protected
  ContigServices dco_decode_box_autoadd_contig_services(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_contig_services(raw);
  }

  @protected
  FilteringServices dco_decode_box_autoadd_filtering_services(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_filtering_services(raw);
  }

  @protected
  PartitionServices dco_decode_box_autoadd_partition_services(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_partition_services(raw);
  }

  @protected
  RawReadServices dco_decode_box_autoadd_raw_read_services(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_raw_read_services(raw);
  }

  @protected
  SequenceExtraction dco_decode_box_autoadd_sequence_extraction(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_sequence_extraction(raw);
  }

  @protected
  SequenceRemoval dco_decode_box_autoadd_sequence_removal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_sequence_removal(raw);
  }

  @protected
  SequenceRenaming dco_decode_box_autoadd_sequence_renaming(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_sequence_renaming(raw);
  }

  @protected
  SequenceServices dco_decode_box_autoadd_sequence_services(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_sequence_services(raw);
  }

  @protected
  SplitAlignmentServices dco_decode_box_autoadd_split_alignment_services(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_split_alignment_services(raw);
  }

  @protected
  ContigServices dco_decode_contig_services(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ContigServices(
      files: dco_decode_list_String(arr[0]),
      fileFmt: dco_decode_String(arr[1]),
      outputDir: dco_decode_String(arr[2]),
    );
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  FilteringParams dco_decode_filtering_params(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return FilteringParams_MinTax(
          dco_decode_f_64(raw[1]),
        );
      case 1:
        return FilteringParams_AlnLen(
          dco_decode_usize(raw[1]),
        );
      case 2:
        return FilteringParams_ParsInf(
          dco_decode_usize(raw[1]),
        );
      case 3:
        return FilteringParams_PercInf(
          dco_decode_f_64(raw[1]),
        );
      case 4:
        return FilteringParams_TaxonAll(
          dco_decode_list_String(raw[1]),
        );
      case 5:
        return const FilteringParams_None();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  FilteringServices dco_decode_filtering_services(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return FilteringServices(
      inputFiles: dco_decode_list_String(arr[0]),
      inputFmt: dco_decode_String(arr[1]),
      datatype: dco_decode_String(arr[2]),
      outputDir: dco_decode_String(arr[3]),
      isConcat: dco_decode_bool(arr[4]),
      params: dco_decode_filtering_params(arr[5]),
      outputFmt: dco_decode_opt_String(arr[6]),
      prefix: dco_decode_opt_String(arr[7]),
      partitionFmt: dco_decode_opt_String(arr[8]),
    );
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  List<String>? dco_decode_opt_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_String(raw);
  }

  @protected
  PartitionServices dco_decode_partition_services(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return PartitionServices(
      inputFiles: dco_decode_list_String(arr[0]),
      inputPartFmt: dco_decode_String(arr[1]),
      output: dco_decode_String(arr[2]),
      outputPartFmt: dco_decode_String(arr[3]),
      datatype: dco_decode_String(arr[4]),
      isUncheck: dco_decode_bool(arr[5]),
    );
  }

  @protected
  RawReadServices dco_decode_raw_read_services(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return RawReadServices(
      files: dco_decode_list_String(arr[0]),
      fileFmt: dco_decode_String(arr[1]),
      outputDir: dco_decode_String(arr[2]),
    );
  }

  @protected
  SequenceExtraction dco_decode_sequence_extraction(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return SequenceExtraction(
      inputFiles: dco_decode_list_String(arr[0]),
      inputFmt: dco_decode_String(arr[1]),
      datatype: dco_decode_String(arr[2]),
      outputDir: dco_decode_String(arr[3]),
      outputFmt: dco_decode_String(arr[4]),
      params: dco_decode_sequence_extraction_params(arr[5]),
    );
  }

  @protected
  SequenceExtractionParams dco_decode_sequence_extraction_params(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return SequenceExtractionParams_Id(
          dco_decode_list_String(raw[1]),
        );
      case 1:
        return SequenceExtractionParams_File(
          dco_decode_String(raw[1]),
        );
      case 2:
        return SequenceExtractionParams_Regex(
          dco_decode_String(raw[1]),
        );
      case 3:
        return const SequenceExtractionParams_None();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  SequenceRemoval dco_decode_sequence_removal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return SequenceRemoval(
      inputFiles: dco_decode_list_String(arr[0]),
      inputFmt: dco_decode_String(arr[1]),
      datatype: dco_decode_String(arr[2]),
      outputDir: dco_decode_String(arr[3]),
      outputFmt: dco_decode_String(arr[4]),
      removeRegex: dco_decode_opt_String(arr[5]),
      removeList: dco_decode_opt_list_String(arr[6]),
    );
  }

  @protected
  SequenceRenaming dco_decode_sequence_renaming(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return SequenceRenaming(
      inputFiles: dco_decode_list_String(arr[0]),
      inputFmt: dco_decode_String(arr[1]),
      datatype: dco_decode_String(arr[2]),
      outputDir: dco_decode_String(arr[3]),
      outputFmt: dco_decode_String(arr[4]),
      params: dco_decode_sequence_renaming_params(arr[5]),
    );
  }

  @protected
  SequenceRenamingParams dco_decode_sequence_renaming_params(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return SequenceRenamingParams_RenameId(
          dco_decode_String(raw[1]),
        );
      case 1:
        return SequenceRenamingParams_RemoveStr(
          dco_decode_String(raw[1]),
        );
      case 2:
        return SequenceRenamingParams_RemoveRegex(
          dco_decode_String(raw[1]),
          dco_decode_bool(raw[2]),
        );
      case 3:
        return SequenceRenamingParams_ReplaceStr(
          dco_decode_String(raw[1]),
          dco_decode_String(raw[2]),
        );
      case 4:
        return SequenceRenamingParams_ReplaceRegex(
          dco_decode_String(raw[1]),
          dco_decode_String(raw[2]),
          dco_decode_bool(raw[3]),
        );
      case 5:
        return const SequenceRenamingParams_None();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  SequenceServices dco_decode_sequence_services(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return SequenceServices(
      inputFiles: dco_decode_list_String(arr[0]),
      inputFmt: dco_decode_String(arr[1]),
      datatype: dco_decode_String(arr[2]),
      outputDir: dco_decode_String(arr[3]),
    );
  }

  @protected
  SplitAlignmentServices dco_decode_split_alignment_services(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return SplitAlignmentServices(
      inputFile: dco_decode_String(arr[0]),
      inputFmt: dco_decode_String(arr[1]),
      datatype: dco_decode_String(arr[2]),
      inputPartition: dco_decode_opt_String(arr[3]),
      inputPartitionFmt: dco_decode_String(arr[4]),
      outputDir: dco_decode_String(arr[5]),
      prefix: dco_decode_opt_String(arr[6]),
      outputFmt: dco_decode_String(arr[7]),
      isUncheck: dco_decode_bool(arr[8]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  int dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  AlignmentServices sse_decode_alignment_services(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_inputFiles = sse_decode_list_String(deserializer);
    var var_inputFmt = sse_decode_String(deserializer);
    var var_datatype = sse_decode_String(deserializer);
    var var_outputDir = sse_decode_String(deserializer);
    return AlignmentServices(
        inputFiles: var_inputFiles,
        inputFmt: var_inputFmt,
        datatype: var_datatype,
        outputDir: var_outputDir);
  }

  @protected
  ArchiveServices sse_decode_archive_services(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_outputPath = sse_decode_String(deserializer);
    var var_inputFiles = sse_decode_list_String(deserializer);
    return ArchiveServices(
        outputPath: var_outputPath, inputFiles: var_inputFiles);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  AlignmentServices sse_decode_box_autoadd_alignment_services(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_alignment_services(deserializer));
  }

  @protected
  ArchiveServices sse_decode_box_autoadd_archive_services(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_archive_services(deserializer));
  }

  @protected
  ContigServices sse_decode_box_autoadd_contig_services(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_contig_services(deserializer));
  }

  @protected
  FilteringServices sse_decode_box_autoadd_filtering_services(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_filtering_services(deserializer));
  }

  @protected
  PartitionServices sse_decode_box_autoadd_partition_services(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_partition_services(deserializer));
  }

  @protected
  RawReadServices sse_decode_box_autoadd_raw_read_services(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_raw_read_services(deserializer));
  }

  @protected
  SequenceExtraction sse_decode_box_autoadd_sequence_extraction(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_sequence_extraction(deserializer));
  }

  @protected
  SequenceRemoval sse_decode_box_autoadd_sequence_removal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_sequence_removal(deserializer));
  }

  @protected
  SequenceRenaming sse_decode_box_autoadd_sequence_renaming(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_sequence_renaming(deserializer));
  }

  @protected
  SequenceServices sse_decode_box_autoadd_sequence_services(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_sequence_services(deserializer));
  }

  @protected
  SplitAlignmentServices sse_decode_box_autoadd_split_alignment_services(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_split_alignment_services(deserializer));
  }

  @protected
  ContigServices sse_decode_contig_services(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_files = sse_decode_list_String(deserializer);
    var var_fileFmt = sse_decode_String(deserializer);
    var var_outputDir = sse_decode_String(deserializer);
    return ContigServices(
        files: var_files, fileFmt: var_fileFmt, outputDir: var_outputDir);
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  FilteringParams sse_decode_filtering_params(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_f_64(deserializer);
        return FilteringParams_MinTax(var_field0);
      case 1:
        var var_field0 = sse_decode_usize(deserializer);
        return FilteringParams_AlnLen(var_field0);
      case 2:
        var var_field0 = sse_decode_usize(deserializer);
        return FilteringParams_ParsInf(var_field0);
      case 3:
        var var_field0 = sse_decode_f_64(deserializer);
        return FilteringParams_PercInf(var_field0);
      case 4:
        var var_field0 = sse_decode_list_String(deserializer);
        return FilteringParams_TaxonAll(var_field0);
      case 5:
        return const FilteringParams_None();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  FilteringServices sse_decode_filtering_services(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_inputFiles = sse_decode_list_String(deserializer);
    var var_inputFmt = sse_decode_String(deserializer);
    var var_datatype = sse_decode_String(deserializer);
    var var_outputDir = sse_decode_String(deserializer);
    var var_isConcat = sse_decode_bool(deserializer);
    var var_params = sse_decode_filtering_params(deserializer);
    var var_outputFmt = sse_decode_opt_String(deserializer);
    var var_prefix = sse_decode_opt_String(deserializer);
    var var_partitionFmt = sse_decode_opt_String(deserializer);
    return FilteringServices(
        inputFiles: var_inputFiles,
        inputFmt: var_inputFmt,
        datatype: var_datatype,
        outputDir: var_outputDir,
        isConcat: var_isConcat,
        params: var_params,
        outputFmt: var_outputFmt,
        prefix: var_prefix,
        partitionFmt: var_partitionFmt);
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<String>? sse_decode_opt_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PartitionServices sse_decode_partition_services(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_inputFiles = sse_decode_list_String(deserializer);
    var var_inputPartFmt = sse_decode_String(deserializer);
    var var_output = sse_decode_String(deserializer);
    var var_outputPartFmt = sse_decode_String(deserializer);
    var var_datatype = sse_decode_String(deserializer);
    var var_isUncheck = sse_decode_bool(deserializer);
    return PartitionServices(
        inputFiles: var_inputFiles,
        inputPartFmt: var_inputPartFmt,
        output: var_output,
        outputPartFmt: var_outputPartFmt,
        datatype: var_datatype,
        isUncheck: var_isUncheck);
  }

  @protected
  RawReadServices sse_decode_raw_read_services(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_files = sse_decode_list_String(deserializer);
    var var_fileFmt = sse_decode_String(deserializer);
    var var_outputDir = sse_decode_String(deserializer);
    return RawReadServices(
        files: var_files, fileFmt: var_fileFmt, outputDir: var_outputDir);
  }

  @protected
  SequenceExtraction sse_decode_sequence_extraction(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_inputFiles = sse_decode_list_String(deserializer);
    var var_inputFmt = sse_decode_String(deserializer);
    var var_datatype = sse_decode_String(deserializer);
    var var_outputDir = sse_decode_String(deserializer);
    var var_outputFmt = sse_decode_String(deserializer);
    var var_params = sse_decode_sequence_extraction_params(deserializer);
    return SequenceExtraction(
        inputFiles: var_inputFiles,
        inputFmt: var_inputFmt,
        datatype: var_datatype,
        outputDir: var_outputDir,
        outputFmt: var_outputFmt,
        params: var_params);
  }

  @protected
  SequenceExtractionParams sse_decode_sequence_extraction_params(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_list_String(deserializer);
        return SequenceExtractionParams_Id(var_field0);
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return SequenceExtractionParams_File(var_field0);
      case 2:
        var var_field0 = sse_decode_String(deserializer);
        return SequenceExtractionParams_Regex(var_field0);
      case 3:
        return const SequenceExtractionParams_None();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  SequenceRemoval sse_decode_sequence_removal(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_inputFiles = sse_decode_list_String(deserializer);
    var var_inputFmt = sse_decode_String(deserializer);
    var var_datatype = sse_decode_String(deserializer);
    var var_outputDir = sse_decode_String(deserializer);
    var var_outputFmt = sse_decode_String(deserializer);
    var var_removeRegex = sse_decode_opt_String(deserializer);
    var var_removeList = sse_decode_opt_list_String(deserializer);
    return SequenceRemoval(
        inputFiles: var_inputFiles,
        inputFmt: var_inputFmt,
        datatype: var_datatype,
        outputDir: var_outputDir,
        outputFmt: var_outputFmt,
        removeRegex: var_removeRegex,
        removeList: var_removeList);
  }

  @protected
  SequenceRenaming sse_decode_sequence_renaming(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_inputFiles = sse_decode_list_String(deserializer);
    var var_inputFmt = sse_decode_String(deserializer);
    var var_datatype = sse_decode_String(deserializer);
    var var_outputDir = sse_decode_String(deserializer);
    var var_outputFmt = sse_decode_String(deserializer);
    var var_params = sse_decode_sequence_renaming_params(deserializer);
    return SequenceRenaming(
        inputFiles: var_inputFiles,
        inputFmt: var_inputFmt,
        datatype: var_datatype,
        outputDir: var_outputDir,
        outputFmt: var_outputFmt,
        params: var_params);
  }

  @protected
  SequenceRenamingParams sse_decode_sequence_renaming_params(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return SequenceRenamingParams_RenameId(var_field0);
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return SequenceRenamingParams_RemoveStr(var_field0);
      case 2:
        var var_field0 = sse_decode_String(deserializer);
        var var_field1 = sse_decode_bool(deserializer);
        return SequenceRenamingParams_RemoveRegex(var_field0, var_field1);
      case 3:
        var var_field0 = sse_decode_String(deserializer);
        var var_field1 = sse_decode_String(deserializer);
        return SequenceRenamingParams_ReplaceStr(var_field0, var_field1);
      case 4:
        var var_field0 = sse_decode_String(deserializer);
        var var_field1 = sse_decode_String(deserializer);
        var var_field2 = sse_decode_bool(deserializer);
        return SequenceRenamingParams_ReplaceRegex(
            var_field0, var_field1, var_field2);
      case 5:
        return const SequenceRenamingParams_None();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  SequenceServices sse_decode_sequence_services(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_inputFiles = sse_decode_list_String(deserializer);
    var var_inputFmt = sse_decode_String(deserializer);
    var var_datatype = sse_decode_String(deserializer);
    var var_outputDir = sse_decode_String(deserializer);
    return SequenceServices(
        inputFiles: var_inputFiles,
        inputFmt: var_inputFmt,
        datatype: var_datatype,
        outputDir: var_outputDir);
  }

  @protected
  SplitAlignmentServices sse_decode_split_alignment_services(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_inputFile = sse_decode_String(deserializer);
    var var_inputFmt = sse_decode_String(deserializer);
    var var_datatype = sse_decode_String(deserializer);
    var var_inputPartition = sse_decode_opt_String(deserializer);
    var var_inputPartitionFmt = sse_decode_String(deserializer);
    var var_outputDir = sse_decode_String(deserializer);
    var var_prefix = sse_decode_opt_String(deserializer);
    var var_outputFmt = sse_decode_String(deserializer);
    var var_isUncheck = sse_decode_bool(deserializer);
    return SplitAlignmentServices(
        inputFile: var_inputFile,
        inputFmt: var_inputFmt,
        datatype: var_datatype,
        inputPartition: var_inputPartition,
        inputPartitionFmt: var_inputPartitionFmt,
        outputDir: var_outputDir,
        prefix: var_prefix,
        outputFmt: var_outputFmt,
        isUncheck: var_isUncheck);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  int sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_alignment_services(
      AlignmentServices self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_String(self.inputFiles, serializer);
    sse_encode_String(self.inputFmt, serializer);
    sse_encode_String(self.datatype, serializer);
    sse_encode_String(self.outputDir, serializer);
  }

  @protected
  void sse_encode_archive_services(
      ArchiveServices self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.outputPath, serializer);
    sse_encode_list_String(self.inputFiles, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_alignment_services(
      AlignmentServices self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_alignment_services(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_archive_services(
      ArchiveServices self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_archive_services(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_contig_services(
      ContigServices self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_contig_services(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_filtering_services(
      FilteringServices self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_filtering_services(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_partition_services(
      PartitionServices self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_partition_services(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_raw_read_services(
      RawReadServices self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_raw_read_services(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_sequence_extraction(
      SequenceExtraction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_sequence_extraction(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_sequence_removal(
      SequenceRemoval self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_sequence_removal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_sequence_renaming(
      SequenceRenaming self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_sequence_renaming(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_sequence_services(
      SequenceServices self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_sequence_services(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_split_alignment_services(
      SplitAlignmentServices self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_split_alignment_services(self, serializer);
  }

  @protected
  void sse_encode_contig_services(
      ContigServices self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_String(self.files, serializer);
    sse_encode_String(self.fileFmt, serializer);
    sse_encode_String(self.outputDir, serializer);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_filtering_params(
      FilteringParams self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case FilteringParams_MinTax(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_f_64(field0, serializer);
      case FilteringParams_AlnLen(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_usize(field0, serializer);
      case FilteringParams_ParsInf(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_usize(field0, serializer);
      case FilteringParams_PercInf(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_f_64(field0, serializer);
      case FilteringParams_TaxonAll(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_list_String(field0, serializer);
      case FilteringParams_None():
        sse_encode_i_32(5, serializer);
    }
  }

  @protected
  void sse_encode_filtering_services(
      FilteringServices self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_String(self.inputFiles, serializer);
    sse_encode_String(self.inputFmt, serializer);
    sse_encode_String(self.datatype, serializer);
    sse_encode_String(self.outputDir, serializer);
    sse_encode_bool(self.isConcat, serializer);
    sse_encode_filtering_params(self.params, serializer);
    sse_encode_opt_String(self.outputFmt, serializer);
    sse_encode_opt_String(self.prefix, serializer);
    sse_encode_opt_String(self.partitionFmt, serializer);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_String(
      List<String>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_String(self, serializer);
    }
  }

  @protected
  void sse_encode_partition_services(
      PartitionServices self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_String(self.inputFiles, serializer);
    sse_encode_String(self.inputPartFmt, serializer);
    sse_encode_String(self.output, serializer);
    sse_encode_String(self.outputPartFmt, serializer);
    sse_encode_String(self.datatype, serializer);
    sse_encode_bool(self.isUncheck, serializer);
  }

  @protected
  void sse_encode_raw_read_services(
      RawReadServices self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_String(self.files, serializer);
    sse_encode_String(self.fileFmt, serializer);
    sse_encode_String(self.outputDir, serializer);
  }

  @protected
  void sse_encode_sequence_extraction(
      SequenceExtraction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_String(self.inputFiles, serializer);
    sse_encode_String(self.inputFmt, serializer);
    sse_encode_String(self.datatype, serializer);
    sse_encode_String(self.outputDir, serializer);
    sse_encode_String(self.outputFmt, serializer);
    sse_encode_sequence_extraction_params(self.params, serializer);
  }

  @protected
  void sse_encode_sequence_extraction_params(
      SequenceExtractionParams self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case SequenceExtractionParams_Id(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_list_String(field0, serializer);
      case SequenceExtractionParams_File(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
      case SequenceExtractionParams_Regex(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_String(field0, serializer);
      case SequenceExtractionParams_None():
        sse_encode_i_32(3, serializer);
    }
  }

  @protected
  void sse_encode_sequence_removal(
      SequenceRemoval self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_String(self.inputFiles, serializer);
    sse_encode_String(self.inputFmt, serializer);
    sse_encode_String(self.datatype, serializer);
    sse_encode_String(self.outputDir, serializer);
    sse_encode_String(self.outputFmt, serializer);
    sse_encode_opt_String(self.removeRegex, serializer);
    sse_encode_opt_list_String(self.removeList, serializer);
  }

  @protected
  void sse_encode_sequence_renaming(
      SequenceRenaming self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_String(self.inputFiles, serializer);
    sse_encode_String(self.inputFmt, serializer);
    sse_encode_String(self.datatype, serializer);
    sse_encode_String(self.outputDir, serializer);
    sse_encode_String(self.outputFmt, serializer);
    sse_encode_sequence_renaming_params(self.params, serializer);
  }

  @protected
  void sse_encode_sequence_renaming_params(
      SequenceRenamingParams self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case SequenceRenamingParams_RenameId(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case SequenceRenamingParams_RemoveStr(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
      case SequenceRenamingParams_RemoveRegex(
          field0: final field0,
          field1: final field1
        ):
        sse_encode_i_32(2, serializer);
        sse_encode_String(field0, serializer);
        sse_encode_bool(field1, serializer);
      case SequenceRenamingParams_ReplaceStr(
          field0: final field0,
          field1: final field1
        ):
        sse_encode_i_32(3, serializer);
        sse_encode_String(field0, serializer);
        sse_encode_String(field1, serializer);
      case SequenceRenamingParams_ReplaceRegex(
          field0: final field0,
          field1: final field1,
          field2: final field2
        ):
        sse_encode_i_32(4, serializer);
        sse_encode_String(field0, serializer);
        sse_encode_String(field1, serializer);
        sse_encode_bool(field2, serializer);
      case SequenceRenamingParams_None():
        sse_encode_i_32(5, serializer);
    }
  }

  @protected
  void sse_encode_sequence_services(
      SequenceServices self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_String(self.inputFiles, serializer);
    sse_encode_String(self.inputFmt, serializer);
    sse_encode_String(self.datatype, serializer);
    sse_encode_String(self.outputDir, serializer);
  }

  @protected
  void sse_encode_split_alignment_services(
      SplitAlignmentServices self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.inputFile, serializer);
    sse_encode_String(self.inputFmt, serializer);
    sse_encode_String(self.datatype, serializer);
    sse_encode_opt_String(self.inputPartition, serializer);
    sse_encode_String(self.inputPartitionFmt, serializer);
    sse_encode_String(self.outputDir, serializer);
    sse_encode_opt_String(self.prefix, serializer);
    sse_encode_String(self.outputFmt, serializer);
    sse_encode_bool(self.isUncheck, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}
