// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.18.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables

import 'api/common.dart';
import 'api/contig.dart';
import 'api/reads.dart';
import 'api/sequence.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  AlignmentServices dco_decode_alignment_services(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  AlignmentServices dco_decode_box_autoadd_alignment_services(dynamic raw);

  @protected
  ContigServices dco_decode_box_autoadd_contig_services(dynamic raw);

  @protected
  FilteringServices dco_decode_box_autoadd_filtering_services(dynamic raw);

  @protected
  PartitionServices dco_decode_box_autoadd_partition_services(dynamic raw);

  @protected
  RawReadServices dco_decode_box_autoadd_raw_read_services(dynamic raw);

  @protected
  SequenceRemoval dco_decode_box_autoadd_sequence_removal(dynamic raw);

  @protected
  SequenceServices dco_decode_box_autoadd_sequence_services(dynamic raw);

  @protected
  SplitAlignmentServices dco_decode_box_autoadd_split_alignment_services(
      dynamic raw);

  @protected
  int dco_decode_box_autoadd_usize(dynamic raw);

  @protected
  ContigServices dco_decode_contig_services(dynamic raw);

  @protected
  double dco_decode_f_64(dynamic raw);

  @protected
  FilteringServices dco_decode_filtering_services(dynamic raw);

  @protected
  List<String> dco_decode_list_String(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  int? dco_decode_opt_box_autoadd_usize(dynamic raw);

  @protected
  List<String>? dco_decode_opt_list_String(dynamic raw);

  @protected
  PartitionServices dco_decode_partition_services(dynamic raw);

  @protected
  RawReadServices dco_decode_raw_read_services(dynamic raw);

  @protected
  SequenceRemoval dco_decode_sequence_removal(dynamic raw);

  @protected
  SequenceServices dco_decode_sequence_services(dynamic raw);

  @protected
  SplitAlignmentServices dco_decode_split_alignment_services(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  int dco_decode_usize(dynamic raw);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  AlignmentServices sse_decode_alignment_services(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  AlignmentServices sse_decode_box_autoadd_alignment_services(
      SseDeserializer deserializer);

  @protected
  ContigServices sse_decode_box_autoadd_contig_services(
      SseDeserializer deserializer);

  @protected
  FilteringServices sse_decode_box_autoadd_filtering_services(
      SseDeserializer deserializer);

  @protected
  PartitionServices sse_decode_box_autoadd_partition_services(
      SseDeserializer deserializer);

  @protected
  RawReadServices sse_decode_box_autoadd_raw_read_services(
      SseDeserializer deserializer);

  @protected
  SequenceRemoval sse_decode_box_autoadd_sequence_removal(
      SseDeserializer deserializer);

  @protected
  SequenceServices sse_decode_box_autoadd_sequence_services(
      SseDeserializer deserializer);

  @protected
  SplitAlignmentServices sse_decode_box_autoadd_split_alignment_services(
      SseDeserializer deserializer);

  @protected
  int sse_decode_box_autoadd_usize(SseDeserializer deserializer);

  @protected
  ContigServices sse_decode_contig_services(SseDeserializer deserializer);

  @protected
  double sse_decode_f_64(SseDeserializer deserializer);

  @protected
  FilteringServices sse_decode_filtering_services(SseDeserializer deserializer);

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  int? sse_decode_opt_box_autoadd_usize(SseDeserializer deserializer);

  @protected
  List<String>? sse_decode_opt_list_String(SseDeserializer deserializer);

  @protected
  PartitionServices sse_decode_partition_services(SseDeserializer deserializer);

  @protected
  RawReadServices sse_decode_raw_read_services(SseDeserializer deserializer);

  @protected
  SequenceRemoval sse_decode_sequence_removal(SseDeserializer deserializer);

  @protected
  SequenceServices sse_decode_sequence_services(SseDeserializer deserializer);

  @protected
  SplitAlignmentServices sse_decode_split_alignment_services(
      SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  int sse_decode_usize(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_String(String raw) {
    return cst_encode_list_prim_u_8_strict(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_cst_alignment_services>
      cst_encode_box_autoadd_alignment_services(AlignmentServices raw) {
    final ptr = wire.cst_new_box_autoadd_alignment_services();
    cst_api_fill_to_wire_alignment_services(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_contig_services> cst_encode_box_autoadd_contig_services(
      ContigServices raw) {
    final ptr = wire.cst_new_box_autoadd_contig_services();
    cst_api_fill_to_wire_contig_services(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_filtering_services>
      cst_encode_box_autoadd_filtering_services(FilteringServices raw) {
    final ptr = wire.cst_new_box_autoadd_filtering_services();
    cst_api_fill_to_wire_filtering_services(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_partition_services>
      cst_encode_box_autoadd_partition_services(PartitionServices raw) {
    final ptr = wire.cst_new_box_autoadd_partition_services();
    cst_api_fill_to_wire_partition_services(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_raw_read_services>
      cst_encode_box_autoadd_raw_read_services(RawReadServices raw) {
    final ptr = wire.cst_new_box_autoadd_raw_read_services();
    cst_api_fill_to_wire_raw_read_services(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_sequence_removal>
      cst_encode_box_autoadd_sequence_removal(SequenceRemoval raw) {
    final ptr = wire.cst_new_box_autoadd_sequence_removal();
    cst_api_fill_to_wire_sequence_removal(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_sequence_services>
      cst_encode_box_autoadd_sequence_services(SequenceServices raw) {
    final ptr = wire.cst_new_box_autoadd_sequence_services();
    cst_api_fill_to_wire_sequence_services(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_split_alignment_services>
      cst_encode_box_autoadd_split_alignment_services(
          SplitAlignmentServices raw) {
    final ptr = wire.cst_new_box_autoadd_split_alignment_services();
    cst_api_fill_to_wire_split_alignment_services(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.UintPtr> cst_encode_box_autoadd_usize(int raw) {
    return wire.cst_new_box_autoadd_usize(cst_encode_usize(raw));
  }

  @protected
  ffi.Pointer<wire_cst_list_String> cst_encode_list_String(List<String> raw) {
    final ans = wire.cst_new_list_String(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      ans.ref.ptr[i] = cst_encode_String(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_list_prim_u_8_strict(
      Uint8List raw) {
    final ans = wire.cst_new_list_prim_u_8_strict(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_opt_String(
      String? raw) {
    return raw == null ? ffi.nullptr : cst_encode_String(raw);
  }

  @protected
  ffi.Pointer<ffi.UintPtr> cst_encode_opt_box_autoadd_usize(int? raw) {
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_usize(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_String> cst_encode_opt_list_String(
      List<String>? raw) {
    return raw == null ? ffi.nullptr : cst_encode_list_String(raw);
  }

  @protected
  void cst_api_fill_to_wire_alignment_services(
      AlignmentServices apiObj, wire_cst_alignment_services wireObj) {
    wireObj.dir = cst_encode_opt_String(apiObj.dir);
    wireObj.input_files = cst_encode_list_String(apiObj.inputFiles);
    wireObj.input_fmt = cst_encode_String(apiObj.inputFmt);
    wireObj.datatype = cst_encode_String(apiObj.datatype);
    wireObj.output_dir = cst_encode_String(apiObj.outputDir);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_alignment_services(
      AlignmentServices apiObj,
      ffi.Pointer<wire_cst_alignment_services> wireObj) {
    cst_api_fill_to_wire_alignment_services(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_contig_services(
      ContigServices apiObj, ffi.Pointer<wire_cst_contig_services> wireObj) {
    cst_api_fill_to_wire_contig_services(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_filtering_services(
      FilteringServices apiObj,
      ffi.Pointer<wire_cst_filtering_services> wireObj) {
    cst_api_fill_to_wire_filtering_services(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_partition_services(
      PartitionServices apiObj,
      ffi.Pointer<wire_cst_partition_services> wireObj) {
    cst_api_fill_to_wire_partition_services(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_raw_read_services(
      RawReadServices apiObj, ffi.Pointer<wire_cst_raw_read_services> wireObj) {
    cst_api_fill_to_wire_raw_read_services(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_sequence_removal(
      SequenceRemoval apiObj, ffi.Pointer<wire_cst_sequence_removal> wireObj) {
    cst_api_fill_to_wire_sequence_removal(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_sequence_services(
      SequenceServices apiObj,
      ffi.Pointer<wire_cst_sequence_services> wireObj) {
    cst_api_fill_to_wire_sequence_services(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_split_alignment_services(
      SplitAlignmentServices apiObj,
      ffi.Pointer<wire_cst_split_alignment_services> wireObj) {
    cst_api_fill_to_wire_split_alignment_services(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_contig_services(
      ContigServices apiObj, wire_cst_contig_services wireObj) {
    wireObj.dir_path = cst_encode_opt_String(apiObj.dirPath);
    wireObj.files = cst_encode_list_String(apiObj.files);
    wireObj.file_fmt = cst_encode_String(apiObj.fileFmt);
    wireObj.output_dir = cst_encode_String(apiObj.outputDir);
  }

  @protected
  void cst_api_fill_to_wire_filtering_services(
      FilteringServices apiObj, wire_cst_filtering_services wireObj) {
    wireObj.dir = cst_encode_opt_String(apiObj.dir);
    wireObj.input_files = cst_encode_list_String(apiObj.inputFiles);
    wireObj.input_fmt = cst_encode_String(apiObj.inputFmt);
    wireObj.datatype = cst_encode_String(apiObj.datatype);
    wireObj.output_dir = cst_encode_String(apiObj.outputDir);
    wireObj.is_concat = cst_encode_bool(apiObj.isConcat);
  }

  @protected
  void cst_api_fill_to_wire_partition_services(
      PartitionServices apiObj, wire_cst_partition_services wireObj) {
    wireObj.input_files = cst_encode_list_String(apiObj.inputFiles);
    wireObj.input_part_fmt = cst_encode_String(apiObj.inputPartFmt);
    wireObj.output = cst_encode_String(apiObj.output);
    wireObj.output_part_fmt = cst_encode_String(apiObj.outputPartFmt);
    wireObj.datatype = cst_encode_String(apiObj.datatype);
    wireObj.is_uncheck = cst_encode_bool(apiObj.isUncheck);
  }

  @protected
  void cst_api_fill_to_wire_raw_read_services(
      RawReadServices apiObj, wire_cst_raw_read_services wireObj) {
    wireObj.dir_path = cst_encode_opt_String(apiObj.dirPath);
    wireObj.files = cst_encode_list_String(apiObj.files);
    wireObj.file_fmt = cst_encode_String(apiObj.fileFmt);
    wireObj.output_dir = cst_encode_String(apiObj.outputDir);
  }

  @protected
  void cst_api_fill_to_wire_sequence_removal(
      SequenceRemoval apiObj, wire_cst_sequence_removal wireObj) {
    wireObj.input_files = cst_encode_list_String(apiObj.inputFiles);
    wireObj.input_fmt = cst_encode_String(apiObj.inputFmt);
    wireObj.datatype = cst_encode_String(apiObj.datatype);
    wireObj.output_dir = cst_encode_String(apiObj.outputDir);
    wireObj.output_fmt = cst_encode_String(apiObj.outputFmt);
    wireObj.remove_regex = cst_encode_opt_String(apiObj.removeRegex);
    wireObj.remove_list = cst_encode_opt_list_String(apiObj.removeList);
  }

  @protected
  void cst_api_fill_to_wire_sequence_services(
      SequenceServices apiObj, wire_cst_sequence_services wireObj) {
    wireObj.dir = cst_encode_opt_String(apiObj.dir);
    wireObj.input_files = cst_encode_list_String(apiObj.inputFiles);
    wireObj.input_fmt = cst_encode_String(apiObj.inputFmt);
    wireObj.datatype = cst_encode_String(apiObj.datatype);
    wireObj.output_dir = cst_encode_String(apiObj.outputDir);
  }

  @protected
  void cst_api_fill_to_wire_split_alignment_services(
      SplitAlignmentServices apiObj,
      wire_cst_split_alignment_services wireObj) {
    wireObj.dir = cst_encode_opt_String(apiObj.dir);
    wireObj.input_file = cst_encode_String(apiObj.inputFile);
    wireObj.input_fmt = cst_encode_String(apiObj.inputFmt);
    wireObj.datatype = cst_encode_String(apiObj.datatype);
    wireObj.input_partition = cst_encode_opt_String(apiObj.inputPartition);
    wireObj.input_partition_fmt = cst_encode_String(apiObj.inputPartitionFmt);
    wireObj.output_dir = cst_encode_String(apiObj.outputDir);
    wireObj.prefix = cst_encode_opt_String(apiObj.prefix);
    wireObj.output_fmt = cst_encode_String(apiObj.outputFmt);
    wireObj.is_uncheck = cst_encode_bool(apiObj.isUncheck);
  }

  @protected
  bool cst_encode_bool(bool raw);

  @protected
  double cst_encode_f_64(double raw);

  @protected
  int cst_encode_u_8(int raw);

  @protected
  void cst_encode_unit(void raw);

  @protected
  int cst_encode_usize(int raw);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_alignment_services(
      AlignmentServices self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_alignment_services(
      AlignmentServices self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_contig_services(
      ContigServices self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_filtering_services(
      FilteringServices self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_partition_services(
      PartitionServices self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_raw_read_services(
      RawReadServices self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_sequence_removal(
      SequenceRemoval self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_sequence_services(
      SequenceServices self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_split_alignment_services(
      SplitAlignmentServices self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_usize(int self, SseSerializer serializer);

  @protected
  void sse_encode_contig_services(
      ContigServices self, SseSerializer serializer);

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer);

  @protected
  void sse_encode_filtering_services(
      FilteringServices self, SseSerializer serializer);

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_usize(int? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_String(List<String>? self, SseSerializer serializer);

  @protected
  void sse_encode_partition_services(
      PartitionServices self, SseSerializer serializer);

  @protected
  void sse_encode_raw_read_services(
      RawReadServices self, SseSerializer serializer);

  @protected
  void sse_encode_sequence_removal(
      SequenceRemoval self, SseSerializer serializer);

  @protected
  void sse_encode_sequence_services(
      SequenceServices self, SseSerializer serializer);

  @protected
  void sse_encode_split_alignment_services(
      SplitAlignmentServices self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_usize(int self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);
}

// Section: wire_class

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class RustLibWire implements BaseWire {
  factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) =>
      RustLibWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustLibWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustLibWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void dart_fn_deliver_output(
    int call_id,
    ffi.Pointer<ffi.Uint8> ptr_,
    int rust_vec_len_,
    int data_len_,
  ) {
    return _dart_fn_deliver_output(
      call_id,
      ptr_,
      rust_vec_len_,
      data_len_,
    );
  }

  late final _dart_fn_deliver_outputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Uint8>, ffi.Int32,
              ffi.Int32)>>('frbgen_segui_dart_fn_deliver_output');
  late final _dart_fn_deliver_output = _dart_fn_deliver_outputPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Uint8>, int, int)>();

  void wire_init_logger(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> log_dir,
  ) {
    return _wire_init_logger(
      port_,
      log_dir,
    );
  }

  late final _wire_init_loggerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_segui_wire_init_logger');
  late final _wire_init_logger = _wire_init_loggerPtr.asFunction<
      void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire_ContigServices_new(
    int port_,
  ) {
    return _wire_ContigServices_new(
      port_,
    );
  }

  late final _wire_ContigServices_newPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_segui_wire_ContigServices_new');
  late final _wire_ContigServices_new =
      _wire_ContigServices_newPtr.asFunction<void Function(int)>();

  void wire_ContigServices_summarize(
    int port_,
    ffi.Pointer<wire_cst_contig_services> that,
  ) {
    return _wire_ContigServices_summarize(
      port_,
      that,
    );
  }

  late final _wire_ContigServices_summarizePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_contig_services>)>>(
      'frbgen_segui_wire_ContigServices_summarize');
  late final _wire_ContigServices_summarize = _wire_ContigServices_summarizePtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_contig_services>)>();

  void wire_RawReadServices_new(
    int port_,
  ) {
    return _wire_RawReadServices_new(
      port_,
    );
  }

  late final _wire_RawReadServices_newPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_segui_wire_RawReadServices_new');
  late final _wire_RawReadServices_new =
      _wire_RawReadServices_newPtr.asFunction<void Function(int)>();

  void wire_RawReadServices_summarize(
    int port_,
    ffi.Pointer<wire_cst_raw_read_services> that,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> mode,
  ) {
    return _wire_RawReadServices_summarize(
      port_,
      that,
      mode,
    );
  }

  late final _wire_RawReadServices_summarizePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_raw_read_services>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_segui_wire_RawReadServices_summarize');
  late final _wire_RawReadServices_summarize =
      _wire_RawReadServices_summarizePtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_raw_read_services>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire_AlignmentServices_concat_alignment(
    int port_,
    ffi.Pointer<wire_cst_alignment_services> that,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> out_fname,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> out_fmt_str,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> partition_fmt,
  ) {
    return _wire_AlignmentServices_concat_alignment(
      port_,
      that,
      out_fname,
      out_fmt_str,
      partition_fmt,
    );
  }

  late final _wire_AlignmentServices_concat_alignmentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_alignment_services>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_segui_wire_AlignmentServices_concat_alignment');
  late final _wire_AlignmentServices_concat_alignment =
      _wire_AlignmentServices_concat_alignmentPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_alignment_services>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire_AlignmentServices_new(
    int port_,
  ) {
    return _wire_AlignmentServices_new(
      port_,
    );
  }

  late final _wire_AlignmentServices_newPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_segui_wire_AlignmentServices_new');
  late final _wire_AlignmentServices_new =
      _wire_AlignmentServices_newPtr.asFunction<void Function(int)>();

  void wire_AlignmentServices_summarize_alignment(
    int port_,
    ffi.Pointer<wire_cst_alignment_services> that,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> output_prefix,
    int interval,
  ) {
    return _wire_AlignmentServices_summarize_alignment(
      port_,
      that,
      output_prefix,
      interval,
    );
  }

  late final _wire_AlignmentServices_summarize_alignmentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_alignment_services>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.UintPtr)>>(
      'frbgen_segui_wire_AlignmentServices_summarize_alignment');
  late final _wire_AlignmentServices_summarize_alignment =
      _wire_AlignmentServices_summarize_alignmentPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_alignment_services>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>, int)>();

  void wire_FilteringServices_filter_minimal_length(
    int port_,
    ffi.Pointer<wire_cst_filtering_services> that,
    int length,
  ) {
    return _wire_FilteringServices_filter_minimal_length(
      port_,
      that,
      length,
    );
  }

  late final _wire_FilteringServices_filter_minimal_lengthPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64,
                  ffi.Pointer<wire_cst_filtering_services>, ffi.UintPtr)>>(
      'frbgen_segui_wire_FilteringServices_filter_minimal_length');
  late final _wire_FilteringServices_filter_minimal_length =
      _wire_FilteringServices_filter_minimal_lengthPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_filtering_services>, int)>();

  void wire_FilteringServices_filter_minimal_taxa(
    int port_,
    ffi.Pointer<wire_cst_filtering_services> that,
    double percent,
    ffi.Pointer<ffi.UintPtr> taxon_count,
  ) {
    return _wire_FilteringServices_filter_minimal_taxa(
      port_,
      that,
      percent,
      taxon_count,
    );
  }

  late final _wire_FilteringServices_filter_minimal_taxaPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_filtering_services>,
                  ffi.Double,
                  ffi.Pointer<ffi.UintPtr>)>>(
      'frbgen_segui_wire_FilteringServices_filter_minimal_taxa');
  late final _wire_FilteringServices_filter_minimal_taxa =
      _wire_FilteringServices_filter_minimal_taxaPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_filtering_services>, double,
              ffi.Pointer<ffi.UintPtr>)>();

  void wire_FilteringServices_filter_parsimony_inf_count(
    int port_,
    ffi.Pointer<wire_cst_filtering_services> that,
    int count,
  ) {
    return _wire_FilteringServices_filter_parsimony_inf_count(
      port_,
      that,
      count,
    );
  }

  late final _wire_FilteringServices_filter_parsimony_inf_countPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64,
                  ffi.Pointer<wire_cst_filtering_services>, ffi.UintPtr)>>(
      'frbgen_segui_wire_FilteringServices_filter_parsimony_inf_count');
  late final _wire_FilteringServices_filter_parsimony_inf_count =
      _wire_FilteringServices_filter_parsimony_inf_countPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_filtering_services>, int)>();

  void wire_FilteringServices_filter_percent_informative(
    int port_,
    ffi.Pointer<wire_cst_filtering_services> that,
    double percent,
  ) {
    return _wire_FilteringServices_filter_percent_informative(
      port_,
      that,
      percent,
    );
  }

  late final _wire_FilteringServices_filter_percent_informativePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64,
                  ffi.Pointer<wire_cst_filtering_services>, ffi.Double)>>(
      'frbgen_segui_wire_FilteringServices_filter_percent_informative');
  late final _wire_FilteringServices_filter_percent_informative =
      _wire_FilteringServices_filter_percent_informativePtr.asFunction<
          void Function(
              int, ffi.Pointer<wire_cst_filtering_services>, double)>();

  void wire_FilteringServices_new(
    int port_,
  ) {
    return _wire_FilteringServices_new(
      port_,
    );
  }

  late final _wire_FilteringServices_newPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_segui_wire_FilteringServices_new');
  late final _wire_FilteringServices_new =
      _wire_FilteringServices_newPtr.asFunction<void Function(int)>();

  void wire_PartitionServices_convert_partition(
    int port_,
    ffi.Pointer<wire_cst_partition_services> that,
  ) {
    return _wire_PartitionServices_convert_partition(
      port_,
      that,
    );
  }

  late final _wire_PartitionServices_convert_partitionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_partition_services>)>>(
      'frbgen_segui_wire_PartitionServices_convert_partition');
  late final _wire_PartitionServices_convert_partition =
      _wire_PartitionServices_convert_partitionPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_partition_services>)>();

  void wire_PartitionServices_new(
    int port_,
  ) {
    return _wire_PartitionServices_new(
      port_,
    );
  }

  late final _wire_PartitionServices_newPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_segui_wire_PartitionServices_new');
  late final _wire_PartitionServices_new =
      _wire_PartitionServices_newPtr.asFunction<void Function(int)>();

  void wire_SequenceRemoval_new(
    int port_,
  ) {
    return _wire_SequenceRemoval_new(
      port_,
    );
  }

  late final _wire_SequenceRemoval_newPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_segui_wire_SequenceRemoval_new');
  late final _wire_SequenceRemoval_new =
      _wire_SequenceRemoval_newPtr.asFunction<void Function(int)>();

  void wire_SequenceRemoval_remove_sequence(
    int port_,
    ffi.Pointer<wire_cst_sequence_removal> that,
  ) {
    return _wire_SequenceRemoval_remove_sequence(
      port_,
      that,
    );
  }

  late final _wire_SequenceRemoval_remove_sequencePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_sequence_removal>)>>(
      'frbgen_segui_wire_SequenceRemoval_remove_sequence');
  late final _wire_SequenceRemoval_remove_sequence =
      _wire_SequenceRemoval_remove_sequencePtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_sequence_removal>)>();

  void wire_SequenceServices_convert_sequence(
    int port_,
    ffi.Pointer<wire_cst_sequence_services> that,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> output_fmt,
    bool sort,
  ) {
    return _wire_SequenceServices_convert_sequence(
      port_,
      that,
      output_fmt,
      sort,
    );
  }

  late final _wire_SequenceServices_convert_sequencePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_sequence_services>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Bool)>>(
      'frbgen_segui_wire_SequenceServices_convert_sequence');
  late final _wire_SequenceServices_convert_sequence =
      _wire_SequenceServices_convert_sequencePtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_sequence_services>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>, bool)>();

  void wire_SequenceServices_new(
    int port_,
  ) {
    return _wire_SequenceServices_new(
      port_,
    );
  }

  late final _wire_SequenceServices_newPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_segui_wire_SequenceServices_new');
  late final _wire_SequenceServices_new =
      _wire_SequenceServices_newPtr.asFunction<void Function(int)>();

  void wire_SequenceServices_parse_sequence_id(
    int port_,
    ffi.Pointer<wire_cst_sequence_services> that,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> output_fname,
    bool is_map,
  ) {
    return _wire_SequenceServices_parse_sequence_id(
      port_,
      that,
      output_fname,
      is_map,
    );
  }

  late final _wire_SequenceServices_parse_sequence_idPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_sequence_services>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Bool)>>(
      'frbgen_segui_wire_SequenceServices_parse_sequence_id');
  late final _wire_SequenceServices_parse_sequence_id =
      _wire_SequenceServices_parse_sequence_idPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_sequence_services>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>, bool)>();

  void wire_SequenceServices_translate_sequence(
    int port_,
    ffi.Pointer<wire_cst_sequence_services> that,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> table,
    int reading_frame,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> output_fmt,
  ) {
    return _wire_SequenceServices_translate_sequence(
      port_,
      that,
      table,
      reading_frame,
      output_fmt,
    );
  }

  late final _wire_SequenceServices_translate_sequencePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_sequence_services>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.UintPtr,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_segui_wire_SequenceServices_translate_sequence');
  late final _wire_SequenceServices_translate_sequence =
      _wire_SequenceServices_translate_sequencePtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_sequence_services>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire_SplitAlignmentServices_new(
    int port_,
  ) {
    return _wire_SplitAlignmentServices_new(
      port_,
    );
  }

  late final _wire_SplitAlignmentServices_newPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_segui_wire_SplitAlignmentServices_new');
  late final _wire_SplitAlignmentServices_new =
      _wire_SplitAlignmentServices_newPtr.asFunction<void Function(int)>();

  void wire_SplitAlignmentServices_split_alignment(
    int port_,
    ffi.Pointer<wire_cst_split_alignment_services> that,
  ) {
    return _wire_SplitAlignmentServices_split_alignment(
      port_,
      that,
    );
  }

  late final _wire_SplitAlignmentServices_split_alignmentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_split_alignment_services>)>>(
      'frbgen_segui_wire_SplitAlignmentServices_split_alignment');
  late final _wire_SplitAlignmentServices_split_alignment =
      _wire_SplitAlignmentServices_split_alignmentPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_split_alignment_services>)>();

  void wire_show_dna_uppercase(
    int port_,
  ) {
    return _wire_show_dna_uppercase(
      port_,
    );
  }

  late final _wire_show_dna_uppercasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_segui_wire_show_dna_uppercase');
  late final _wire_show_dna_uppercase =
      _wire_show_dna_uppercasePtr.asFunction<void Function(int)>();

  ffi.Pointer<wire_cst_alignment_services>
      cst_new_box_autoadd_alignment_services() {
    return _cst_new_box_autoadd_alignment_services();
  }

  late final _cst_new_box_autoadd_alignment_servicesPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_cst_alignment_services> Function()>>(
      'frbgen_segui_cst_new_box_autoadd_alignment_services');
  late final _cst_new_box_autoadd_alignment_services =
      _cst_new_box_autoadd_alignment_servicesPtr
          .asFunction<ffi.Pointer<wire_cst_alignment_services> Function()>();

  ffi.Pointer<wire_cst_contig_services> cst_new_box_autoadd_contig_services() {
    return _cst_new_box_autoadd_contig_services();
  }

  late final _cst_new_box_autoadd_contig_servicesPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_contig_services> Function()>>(
      'frbgen_segui_cst_new_box_autoadd_contig_services');
  late final _cst_new_box_autoadd_contig_services =
      _cst_new_box_autoadd_contig_servicesPtr
          .asFunction<ffi.Pointer<wire_cst_contig_services> Function()>();

  ffi.Pointer<wire_cst_filtering_services>
      cst_new_box_autoadd_filtering_services() {
    return _cst_new_box_autoadd_filtering_services();
  }

  late final _cst_new_box_autoadd_filtering_servicesPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_cst_filtering_services> Function()>>(
      'frbgen_segui_cst_new_box_autoadd_filtering_services');
  late final _cst_new_box_autoadd_filtering_services =
      _cst_new_box_autoadd_filtering_servicesPtr
          .asFunction<ffi.Pointer<wire_cst_filtering_services> Function()>();

  ffi.Pointer<wire_cst_partition_services>
      cst_new_box_autoadd_partition_services() {
    return _cst_new_box_autoadd_partition_services();
  }

  late final _cst_new_box_autoadd_partition_servicesPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_cst_partition_services> Function()>>(
      'frbgen_segui_cst_new_box_autoadd_partition_services');
  late final _cst_new_box_autoadd_partition_services =
      _cst_new_box_autoadd_partition_servicesPtr
          .asFunction<ffi.Pointer<wire_cst_partition_services> Function()>();

  ffi.Pointer<wire_cst_raw_read_services>
      cst_new_box_autoadd_raw_read_services() {
    return _cst_new_box_autoadd_raw_read_services();
  }

  late final _cst_new_box_autoadd_raw_read_servicesPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_cst_raw_read_services> Function()>>(
      'frbgen_segui_cst_new_box_autoadd_raw_read_services');
  late final _cst_new_box_autoadd_raw_read_services =
      _cst_new_box_autoadd_raw_read_servicesPtr
          .asFunction<ffi.Pointer<wire_cst_raw_read_services> Function()>();

  ffi.Pointer<wire_cst_sequence_removal>
      cst_new_box_autoadd_sequence_removal() {
    return _cst_new_box_autoadd_sequence_removal();
  }

  late final _cst_new_box_autoadd_sequence_removalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_cst_sequence_removal> Function()>>(
      'frbgen_segui_cst_new_box_autoadd_sequence_removal');
  late final _cst_new_box_autoadd_sequence_removal =
      _cst_new_box_autoadd_sequence_removalPtr
          .asFunction<ffi.Pointer<wire_cst_sequence_removal> Function()>();

  ffi.Pointer<wire_cst_sequence_services>
      cst_new_box_autoadd_sequence_services() {
    return _cst_new_box_autoadd_sequence_services();
  }

  late final _cst_new_box_autoadd_sequence_servicesPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_cst_sequence_services> Function()>>(
      'frbgen_segui_cst_new_box_autoadd_sequence_services');
  late final _cst_new_box_autoadd_sequence_services =
      _cst_new_box_autoadd_sequence_servicesPtr
          .asFunction<ffi.Pointer<wire_cst_sequence_services> Function()>();

  ffi.Pointer<wire_cst_split_alignment_services>
      cst_new_box_autoadd_split_alignment_services() {
    return _cst_new_box_autoadd_split_alignment_services();
  }

  late final _cst_new_box_autoadd_split_alignment_servicesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_split_alignment_services> Function()>>(
      'frbgen_segui_cst_new_box_autoadd_split_alignment_services');
  late final _cst_new_box_autoadd_split_alignment_services =
      _cst_new_box_autoadd_split_alignment_servicesPtr.asFunction<
          ffi.Pointer<wire_cst_split_alignment_services> Function()>();

  ffi.Pointer<ffi.UintPtr> cst_new_box_autoadd_usize(
    int value,
  ) {
    return _cst_new_box_autoadd_usize(
      value,
    );
  }

  late final _cst_new_box_autoadd_usizePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.UintPtr> Function(ffi.UintPtr)>>(
      'frbgen_segui_cst_new_box_autoadd_usize');
  late final _cst_new_box_autoadd_usize = _cst_new_box_autoadd_usizePtr
      .asFunction<ffi.Pointer<ffi.UintPtr> Function(int)>();

  ffi.Pointer<wire_cst_list_String> cst_new_list_String(
    int len,
  ) {
    return _cst_new_list_String(
      len,
    );
  }

  late final _cst_new_list_StringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_String> Function(
              ffi.Int32)>>('frbgen_segui_cst_new_list_String');
  late final _cst_new_list_String = _cst_new_list_StringPtr
      .asFunction<ffi.Pointer<wire_cst_list_String> Function(int)>();

  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_new_list_prim_u_8_strict(
    int len,
  ) {
    return _cst_new_list_prim_u_8_strict(
      len,
    );
  }

  late final _cst_new_list_prim_u_8_strictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(
              ffi.Int32)>>('frbgen_segui_cst_new_list_prim_u_8_strict');
  late final _cst_new_list_prim_u_8_strict = _cst_new_list_prim_u_8_strictPtr
      .asFunction<ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(int)>();

  int dummy_method_to_enforce_bundling() {
    return _dummy_method_to_enforce_bundling();
  }

  late final _dummy_method_to_enforce_bundlingPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>(
          'dummy_method_to_enforce_bundling');
  late final _dummy_method_to_enforce_bundling =
      _dummy_method_to_enforce_bundlingPtr.asFunction<int Function()>();
}

final class wire_cst_list_prim_u_8_strict extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_String extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_cst_list_prim_u_8_strict>> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_contig_services extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> dir_path;

  external ffi.Pointer<wire_cst_list_String> files;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> file_fmt;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> output_dir;
}

final class wire_cst_raw_read_services extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> dir_path;

  external ffi.Pointer<wire_cst_list_String> files;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> file_fmt;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> output_dir;
}

final class wire_cst_alignment_services extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> dir;

  external ffi.Pointer<wire_cst_list_String> input_files;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> input_fmt;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> datatype;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> output_dir;
}

final class wire_cst_filtering_services extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> dir;

  external ffi.Pointer<wire_cst_list_String> input_files;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> input_fmt;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> datatype;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> output_dir;

  @ffi.Bool()
  external bool is_concat;
}

final class wire_cst_partition_services extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_String> input_files;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> input_part_fmt;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> output;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> output_part_fmt;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> datatype;

  @ffi.Bool()
  external bool is_uncheck;
}

final class wire_cst_sequence_removal extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_String> input_files;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> input_fmt;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> datatype;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> output_dir;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> output_fmt;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> remove_regex;

  external ffi.Pointer<wire_cst_list_String> remove_list;
}

final class wire_cst_sequence_services extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> dir;

  external ffi.Pointer<wire_cst_list_String> input_files;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> input_fmt;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> datatype;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> output_dir;
}

final class wire_cst_split_alignment_services extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> dir;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> input_file;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> input_fmt;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> datatype;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> input_partition;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> input_partition_fmt;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> output_dir;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> prefix;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> output_fmt;

  @ffi.Bool()
  external bool is_uncheck;
}
