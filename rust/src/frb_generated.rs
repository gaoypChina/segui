// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.18.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments
)]

// Section: imports

use crate::api::sequence::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!();

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire_init_logger_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    log_dir: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_logger",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_log_dir = log_dir.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::common::init_logger(api_log_dir))
                })())
            }
        },
    )
}
fn wire_ContigServices_new_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ContigServices_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::contig::ContigServices::new())
                })())
            }
        },
    )
}
fn wire_ContigServices_summarize_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::contig::ContigServices>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ContigServices_summarize",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::contig::ContigServices::summarize(&api_that))
                })())
            }
        },
    )
}
fn wire_RawReadServices_new_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "RawReadServices_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::reads::RawReadServices::new())
                })())
            }
        },
    )
}
fn wire_RawReadServices_summarize_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::reads::RawReadServices>,
    mode: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "RawReadServices_summarize",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_mode = mode.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::reads::RawReadServices::summarize(
                        &api_that, api_mode,
                    ))
                })())
            }
        },
    )
}
fn wire_AlignmentServices_concat_alignment_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::sequence::AlignmentServices>,
    out_fname: impl CstDecode<String>,
    out_fmt_str: impl CstDecode<String>,
    partition_fmt: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "AlignmentServices_concat_alignment",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_out_fname = out_fname.cst_decode();
            let api_out_fmt_str = out_fmt_str.cst_decode();
            let api_partition_fmt = partition_fmt.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::sequence::AlignmentServices::concat_alignment(
                        &api_that,
                        api_out_fname,
                        api_out_fmt_str,
                        api_partition_fmt,
                    ))
                })())
            }
        },
    )
}
fn wire_AlignmentServices_new_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "AlignmentServices_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::sequence::AlignmentServices::new())
                })())
            }
        },
    )
}
fn wire_AlignmentServices_summarize_alignment_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::sequence::AlignmentServices>,
    output_prefix: impl CstDecode<String>,
    interval: impl CstDecode<usize>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "AlignmentServices_summarize_alignment",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_output_prefix = output_prefix.cst_decode();
            let api_interval = interval.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::sequence::AlignmentServices::summarize_alignment(
                            &api_that,
                            api_output_prefix,
                            api_interval,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_FilteringServices_filter_minimal_length_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::sequence::FilteringServices>,
    length: impl CstDecode<usize>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "FilteringServices_filter_minimal_length",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_length = length.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::sequence::FilteringServices::filter_minimal_length(
                            &api_that, api_length,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_FilteringServices_filter_minimal_taxa_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::sequence::FilteringServices>,
    percent: impl CstDecode<f64>,
    taxon_count: impl CstDecode<Option<usize>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "FilteringServices_filter_minimal_taxa",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_percent = percent.cst_decode();
            let api_taxon_count = taxon_count.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::sequence::FilteringServices::filter_minimal_taxa(
                            &api_that,
                            api_percent,
                            api_taxon_count,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_FilteringServices_filter_parsimony_inf_count_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::sequence::FilteringServices>,
    count: impl CstDecode<usize>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "FilteringServices_filter_parsimony_inf_count",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_count = count.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::sequence::FilteringServices::filter_parsimony_inf_count(
                            &api_that, api_count,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_FilteringServices_filter_percent_informative_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::sequence::FilteringServices>,
    percent: impl CstDecode<f64>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "FilteringServices_filter_percent_informative",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_percent = percent.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::sequence::FilteringServices::filter_percent_informative(
                            &api_that,
                            api_percent,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_FilteringServices_new_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "FilteringServices_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::sequence::FilteringServices::new())
                })())
            }
        },
    )
}
fn wire_PartitionServices_convert_partition_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::sequence::PartitionServices>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "PartitionServices_convert_partition",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::sequence::PartitionServices::convert_partition(
                        &api_that,
                    ))
                })())
            }
        },
    )
}
fn wire_PartitionServices_new_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "PartitionServices_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::sequence::PartitionServices::new())
                })())
            }
        },
    )
}
fn wire_SequenceExtraction_extract_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        flutter_rust_bridge::RustOpaque<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                crate::api::sequence::SequenceExtraction,
            >,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SequenceExtraction_extract",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                    Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                        crate::api::sequence::SequenceExtraction::extract(&api_that),
                    )
                })())
            }
        },
    )
}
fn wire_SequenceExtraction_new_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SequenceExtraction_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                            crate::api::sequence::SequenceExtraction::new(),
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_SequenceRemoval_new_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SequenceRemoval_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::sequence::SequenceRemoval::new())
                })())
            }
        },
    )
}
fn wire_SequenceRemoval_remove_sequence_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::sequence::SequenceRemoval>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SequenceRemoval_remove_sequence",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::sequence::SequenceRemoval::remove_sequence(
                        &api_that,
                    ))
                })())
            }
        },
    )
}
fn wire_SequenceRenaming_new_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SequenceRenaming_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                            crate::api::sequence::SequenceRenaming::new(),
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_SequenceRenaming_rename_sequence_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        flutter_rust_bridge::RustOpaque<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                crate::api::sequence::SequenceRenaming,
            >,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SequenceRenaming_rename_sequence",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                    Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                        crate::api::sequence::SequenceRenaming::rename_sequence(&api_that),
                    )
                })())
            }
        },
    )
}
fn wire_SequenceServices_convert_sequence_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::sequence::SequenceServices>,
    output_fmt: impl CstDecode<String>,
    sort: impl CstDecode<bool>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SequenceServices_convert_sequence",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_output_fmt = output_fmt.cst_decode();
            let api_sort = sort.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::sequence::SequenceServices::convert_sequence(
                        &api_that,
                        api_output_fmt,
                        api_sort,
                    ))
                })())
            }
        },
    )
}
fn wire_SequenceServices_new_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SequenceServices_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::sequence::SequenceServices::new())
                })())
            }
        },
    )
}
fn wire_SequenceServices_parse_sequence_id_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::sequence::SequenceServices>,
    output_fname: impl CstDecode<String>,
    is_map: impl CstDecode<bool>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SequenceServices_parse_sequence_id",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_output_fname = output_fname.cst_decode();
            let api_is_map = is_map.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::sequence::SequenceServices::parse_sequence_id(
                        &api_that,
                        api_output_fname,
                        api_is_map,
                    ))
                })())
            }
        },
    )
}
fn wire_SequenceServices_translate_sequence_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::sequence::SequenceServices>,
    table: impl CstDecode<String>,
    reading_frame: impl CstDecode<usize>,
    output_fmt: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SequenceServices_translate_sequence",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_table = table.cst_decode();
            let api_reading_frame = reading_frame.cst_decode();
            let api_output_fmt = output_fmt.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::sequence::SequenceServices::translate_sequence(
                        &api_that,
                        api_table,
                        api_reading_frame,
                        api_output_fmt,
                    ))
                })())
            }
        },
    )
}
fn wire_SplitAlignmentServices_new_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SplitAlignmentServices_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::sequence::SplitAlignmentServices::new())
                })())
            }
        },
    )
}
fn wire_SplitAlignmentServices_split_alignment_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::sequence::SplitAlignmentServices>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SplitAlignmentServices_split_alignment",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::sequence::SplitAlignmentServices::split_alignment(&api_that),
                    )
                })())
            }
        },
    )
}
fn wire_show_dna_uppercase_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "show_dna_uppercase",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::sequence::show_dna_uppercase())
                })())
            }
        },
    )
}

// Section: dart2rust

impl CstDecode<bool> for bool {
    fn cst_decode(self) -> bool {
        self
    }
}
impl CstDecode<f64> for f64 {
    fn cst_decode(self) -> f64 {
        self
    }
}
impl CstDecode<u8> for u8 {
    fn cst_decode(self) -> u8 {
        self
    }
}
impl CstDecode<usize> for usize {
    fn cst_decode(self) -> usize {
        self
    }
}
impl SseDecode
    for flutter_rust_bridge::RustOpaque<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            crate::api::sequence::SequenceExtraction,
        >,
    >
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { flutter_rust_bridge::for_generated::sse_decode_rust_opaque(inner) };
    }
}

impl SseDecode
    for flutter_rust_bridge::RustOpaque<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            crate::api::sequence::SequenceRenaming,
        >,
    >
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { flutter_rust_bridge::for_generated::sse_decode_rust_opaque(inner) };
    }
}

impl SseDecode for String {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for crate::api::sequence::AlignmentServices {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_dir = <Option<String>>::sse_decode(deserializer);
        let mut var_inputFiles = <Vec<String>>::sse_decode(deserializer);
        let mut var_inputFmt = <String>::sse_decode(deserializer);
        let mut var_datatype = <String>::sse_decode(deserializer);
        let mut var_outputDir = <String>::sse_decode(deserializer);
        return crate::api::sequence::AlignmentServices {
            dir: var_dir,
            input_files: var_inputFiles,
            input_fmt: var_inputFmt,
            datatype: var_datatype,
            output_dir: var_outputDir,
        };
    }
}

impl SseDecode for bool {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::api::contig::ContigServices {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_dirPath = <Option<String>>::sse_decode(deserializer);
        let mut var_files = <Vec<String>>::sse_decode(deserializer);
        let mut var_fileFmt = <String>::sse_decode(deserializer);
        let mut var_outputDir = <String>::sse_decode(deserializer);
        return crate::api::contig::ContigServices {
            dir_path: var_dirPath,
            files: var_files,
            file_fmt: var_fileFmt,
            output_dir: var_outputDir,
        };
    }
}

impl SseDecode for f64 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::api::sequence::FilteringServices {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_dir = <Option<String>>::sse_decode(deserializer);
        let mut var_inputFiles = <Vec<String>>::sse_decode(deserializer);
        let mut var_inputFmt = <String>::sse_decode(deserializer);
        let mut var_datatype = <String>::sse_decode(deserializer);
        let mut var_outputDir = <String>::sse_decode(deserializer);
        let mut var_isConcat = <bool>::sse_decode(deserializer);
        return crate::api::sequence::FilteringServices {
            dir: var_dir,
            input_files: var_inputFiles,
            input_fmt: var_inputFmt,
            datatype: var_datatype,
            output_dir: var_outputDir,
            is_concat: var_isConcat,
        };
    }
}

impl SseDecode for Vec<String> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<String>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Option<String> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<usize> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<usize>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<String>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<String>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::api::sequence::PartitionServices {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_inputFiles = <Vec<String>>::sse_decode(deserializer);
        let mut var_inputPartFmt = <String>::sse_decode(deserializer);
        let mut var_output = <String>::sse_decode(deserializer);
        let mut var_outputPartFmt = <String>::sse_decode(deserializer);
        let mut var_datatype = <String>::sse_decode(deserializer);
        let mut var_isUncheck = <bool>::sse_decode(deserializer);
        return crate::api::sequence::PartitionServices {
            input_files: var_inputFiles,
            input_part_fmt: var_inputPartFmt,
            output: var_output,
            output_part_fmt: var_outputPartFmt,
            datatype: var_datatype,
            is_uncheck: var_isUncheck,
        };
    }
}

impl SseDecode for crate::api::reads::RawReadServices {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_dirPath = <Option<String>>::sse_decode(deserializer);
        let mut var_files = <Vec<String>>::sse_decode(deserializer);
        let mut var_fileFmt = <String>::sse_decode(deserializer);
        let mut var_outputDir = <String>::sse_decode(deserializer);
        return crate::api::reads::RawReadServices {
            dir_path: var_dirPath,
            files: var_files,
            file_fmt: var_fileFmt,
            output_dir: var_outputDir,
        };
    }
}

impl SseDecode for crate::api::sequence::SequenceRemoval {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_inputFiles = <Vec<String>>::sse_decode(deserializer);
        let mut var_inputFmt = <String>::sse_decode(deserializer);
        let mut var_datatype = <String>::sse_decode(deserializer);
        let mut var_outputDir = <String>::sse_decode(deserializer);
        let mut var_outputFmt = <String>::sse_decode(deserializer);
        let mut var_removeRegex = <Option<String>>::sse_decode(deserializer);
        let mut var_removeList = <Option<Vec<String>>>::sse_decode(deserializer);
        return crate::api::sequence::SequenceRemoval {
            input_files: var_inputFiles,
            input_fmt: var_inputFmt,
            datatype: var_datatype,
            output_dir: var_outputDir,
            output_fmt: var_outputFmt,
            remove_regex: var_removeRegex,
            remove_list: var_removeList,
        };
    }
}

impl SseDecode for crate::api::sequence::SequenceServices {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_dir = <Option<String>>::sse_decode(deserializer);
        let mut var_inputFiles = <Vec<String>>::sse_decode(deserializer);
        let mut var_inputFmt = <String>::sse_decode(deserializer);
        let mut var_datatype = <String>::sse_decode(deserializer);
        let mut var_outputDir = <String>::sse_decode(deserializer);
        return crate::api::sequence::SequenceServices {
            dir: var_dir,
            input_files: var_inputFiles,
            input_fmt: var_inputFmt,
            datatype: var_datatype,
            output_dir: var_outputDir,
        };
    }
}

impl SseDecode for crate::api::sequence::SplitAlignmentServices {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_dir = <Option<String>>::sse_decode(deserializer);
        let mut var_inputFile = <String>::sse_decode(deserializer);
        let mut var_inputFmt = <String>::sse_decode(deserializer);
        let mut var_datatype = <String>::sse_decode(deserializer);
        let mut var_inputPartition = <Option<String>>::sse_decode(deserializer);
        let mut var_inputPartitionFmt = <String>::sse_decode(deserializer);
        let mut var_outputDir = <String>::sse_decode(deserializer);
        let mut var_prefix = <Option<String>>::sse_decode(deserializer);
        let mut var_outputFmt = <String>::sse_decode(deserializer);
        let mut var_isUncheck = <bool>::sse_decode(deserializer);
        return crate::api::sequence::SplitAlignmentServices {
            dir: var_dir,
            input_file: var_inputFile,
            input_fmt: var_inputFmt,
            datatype: var_datatype,
            input_partition: var_inputPartition,
            input_partition_fmt: var_inputPartitionFmt,
            output_dir: var_outputDir,
            prefix: var_prefix,
            output_fmt: var_outputFmt,
            is_uncheck: var_isUncheck,
        };
    }
}

impl SseDecode for u8 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

impl SseDecode for i32 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

// Section: rust2dart

impl flutter_rust_bridge::IntoDart for crate::api::sequence::AlignmentServices {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.dir.into_into_dart().into_dart(),
            self.input_files.into_into_dart().into_dart(),
            self.input_fmt.into_into_dart().into_dart(),
            self.datatype.into_into_dart().into_dart(),
            self.output_dir.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::sequence::AlignmentServices
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::sequence::AlignmentServices>
    for crate::api::sequence::AlignmentServices
{
    fn into_into_dart(self) -> crate::api::sequence::AlignmentServices {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::contig::ContigServices {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.dir_path.into_into_dart().into_dart(),
            self.files.into_into_dart().into_dart(),
            self.file_fmt.into_into_dart().into_dart(),
            self.output_dir.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::contig::ContigServices
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::contig::ContigServices>
    for crate::api::contig::ContigServices
{
    fn into_into_dart(self) -> crate::api::contig::ContigServices {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::sequence::FilteringServices {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.dir.into_into_dart().into_dart(),
            self.input_files.into_into_dart().into_dart(),
            self.input_fmt.into_into_dart().into_dart(),
            self.datatype.into_into_dart().into_dart(),
            self.output_dir.into_into_dart().into_dart(),
            self.is_concat.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::sequence::FilteringServices
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::sequence::FilteringServices>
    for crate::api::sequence::FilteringServices
{
    fn into_into_dart(self) -> crate::api::sequence::FilteringServices {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::sequence::PartitionServices {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.input_files.into_into_dart().into_dart(),
            self.input_part_fmt.into_into_dart().into_dart(),
            self.output.into_into_dart().into_dart(),
            self.output_part_fmt.into_into_dart().into_dart(),
            self.datatype.into_into_dart().into_dart(),
            self.is_uncheck.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::sequence::PartitionServices
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::sequence::PartitionServices>
    for crate::api::sequence::PartitionServices
{
    fn into_into_dart(self) -> crate::api::sequence::PartitionServices {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::reads::RawReadServices {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.dir_path.into_into_dart().into_dart(),
            self.files.into_into_dart().into_dart(),
            self.file_fmt.into_into_dart().into_dart(),
            self.output_dir.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::reads::RawReadServices
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::reads::RawReadServices>
    for crate::api::reads::RawReadServices
{
    fn into_into_dart(self) -> crate::api::reads::RawReadServices {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::sequence::SequenceRemoval {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.input_files.into_into_dart().into_dart(),
            self.input_fmt.into_into_dart().into_dart(),
            self.datatype.into_into_dart().into_dart(),
            self.output_dir.into_into_dart().into_dart(),
            self.output_fmt.into_into_dart().into_dart(),
            self.remove_regex.into_into_dart().into_dart(),
            self.remove_list.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::sequence::SequenceRemoval
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::sequence::SequenceRemoval>
    for crate::api::sequence::SequenceRemoval
{
    fn into_into_dart(self) -> crate::api::sequence::SequenceRemoval {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::sequence::SequenceServices {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.dir.into_into_dart().into_dart(),
            self.input_files.into_into_dart().into_dart(),
            self.input_fmt.into_into_dart().into_dart(),
            self.datatype.into_into_dart().into_dart(),
            self.output_dir.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::sequence::SequenceServices
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::sequence::SequenceServices>
    for crate::api::sequence::SequenceServices
{
    fn into_into_dart(self) -> crate::api::sequence::SequenceServices {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::sequence::SplitAlignmentServices {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.dir.into_into_dart().into_dart(),
            self.input_file.into_into_dart().into_dart(),
            self.input_fmt.into_into_dart().into_dart(),
            self.datatype.into_into_dart().into_dart(),
            self.input_partition.into_into_dart().into_dart(),
            self.input_partition_fmt.into_into_dart().into_dart(),
            self.output_dir.into_into_dart().into_dart(),
            self.prefix.into_into_dart().into_dart(),
            self.output_fmt.into_into_dart().into_dart(),
            self.is_uncheck.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::sequence::SplitAlignmentServices
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::sequence::SplitAlignmentServices>
    for crate::api::sequence::SplitAlignmentServices
{
    fn into_into_dart(self) -> crate::api::sequence::SplitAlignmentServices {
        self
    }
}

impl SseEncode
    for flutter_rust_bridge::RustOpaque<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            crate::api::sequence::SequenceExtraction,
        >,
    >
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for flutter_rust_bridge::RustOpaque<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            crate::api::sequence::SequenceRenaming,
        >,
    >
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for String {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for crate::api::sequence::AlignmentServices {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.dir, serializer);
        <Vec<String>>::sse_encode(self.input_files, serializer);
        <String>::sse_encode(self.input_fmt, serializer);
        <String>::sse_encode(self.datatype, serializer);
        <String>::sse_encode(self.output_dir, serializer);
    }
}

impl SseEncode for bool {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::api::contig::ContigServices {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.dir_path, serializer);
        <Vec<String>>::sse_encode(self.files, serializer);
        <String>::sse_encode(self.file_fmt, serializer);
        <String>::sse_encode(self.output_dir, serializer);
    }
}

impl SseEncode for f64 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::api::sequence::FilteringServices {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.dir, serializer);
        <Vec<String>>::sse_encode(self.input_files, serializer);
        <String>::sse_encode(self.input_fmt, serializer);
        <String>::sse_encode(self.datatype, serializer);
        <String>::sse_encode(self.output_dir, serializer);
        <bool>::sse_encode(self.is_concat, serializer);
    }
}

impl SseEncode for Vec<String> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <String>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Option<String> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<usize> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <usize>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<String>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<String>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::api::sequence::PartitionServices {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<String>>::sse_encode(self.input_files, serializer);
        <String>::sse_encode(self.input_part_fmt, serializer);
        <String>::sse_encode(self.output, serializer);
        <String>::sse_encode(self.output_part_fmt, serializer);
        <String>::sse_encode(self.datatype, serializer);
        <bool>::sse_encode(self.is_uncheck, serializer);
    }
}

impl SseEncode for crate::api::reads::RawReadServices {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.dir_path, serializer);
        <Vec<String>>::sse_encode(self.files, serializer);
        <String>::sse_encode(self.file_fmt, serializer);
        <String>::sse_encode(self.output_dir, serializer);
    }
}

impl SseEncode for crate::api::sequence::SequenceRemoval {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<String>>::sse_encode(self.input_files, serializer);
        <String>::sse_encode(self.input_fmt, serializer);
        <String>::sse_encode(self.datatype, serializer);
        <String>::sse_encode(self.output_dir, serializer);
        <String>::sse_encode(self.output_fmt, serializer);
        <Option<String>>::sse_encode(self.remove_regex, serializer);
        <Option<Vec<String>>>::sse_encode(self.remove_list, serializer);
    }
}

impl SseEncode for crate::api::sequence::SequenceServices {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.dir, serializer);
        <Vec<String>>::sse_encode(self.input_files, serializer);
        <String>::sse_encode(self.input_fmt, serializer);
        <String>::sse_encode(self.datatype, serializer);
        <String>::sse_encode(self.output_dir, serializer);
    }
}

impl SseEncode for crate::api::sequence::SplitAlignmentServices {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.dir, serializer);
        <String>::sse_encode(self.input_file, serializer);
        <String>::sse_encode(self.input_fmt, serializer);
        <String>::sse_encode(self.datatype, serializer);
        <Option<String>>::sse_encode(self.input_partition, serializer);
        <String>::sse_encode(self.input_partition_fmt, serializer);
        <String>::sse_encode(self.output_dir, serializer);
        <Option<String>>::sse_encode(self.prefix, serializer);
        <String>::sse_encode(self.output_fmt, serializer);
        <bool>::sse_encode(self.is_uncheck, serializer);
    }
}

impl SseEncode for u8 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

impl SseEncode for i32 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
#[path = "frb_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "frb_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;
